// webhook.mjs
import { retrieveRelevantChunks } from '../data/rag.mjs'; // ‚Üê –∞–±–æ '../lib/rag.mjs' —è–∫—â–æ –≤ —Ç–µ–±–µ —ñ–Ω—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î)
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');

// –ê–Ω–µ–∫–¥–æ—Ç–∏ –ø—Ä–æ Vidzone
const jokes = [
  "–ß–æ–º—É —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ Vidzone –Ω—ñ–∫–æ–ª–∏ –Ω–µ —Å–ø–∏—Ç—å? –ë–æ –≤–æ–Ω–∞ –≤ –µ—Ñ—ñ—Ä—ñ –Ω–∞–≤—ñ—Ç—å —É–Ω–æ—á—ñ! üòÑ",
  "–©–æ –∫–∞–∂–µ Vidzone –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∫–∞–º–ø–∞–Ω—ñ—ó? ¬´–¢—Ä–∏–º–∞–π—Å—è, –µ—Ñ—ñ—Ä –∑–∞—Ä–∞–∑ –≤–∏–±—É—Ö–Ω–µ!¬ª üì∫",
  "–ù–∞ Vidzone —Ä–µ–∫–ª–∞–º—É –±–∞—á–∞—Ç—å –Ω–∞–≤—ñ—Ç—å —Ç—ñ, —Ö—Ç–æ –Ω–µ –¥–∏–≤–∏—Ç—å—Å—è —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä! üòé",
];

export default async function handler(req, res) {
  const { body } = req;
  if (!body?.message?.text) return res.status(200).send('Non-message update skipped');

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  console.log(`User asked: ${text}`);

  const userMessage = text?.toLowerCase().trim() || '';

  // === –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —à–∞–±–ª–æ–Ω–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ===
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      '–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –î–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –ø–æ—Å–ª—É–≥–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∏, —á–∏ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å üôÇ'
    );
    return res.status(200).send('Welcome Sent');
  }

  // –ö–µ—Ä—ñ–≤–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó (—É—Å—ñ –∫–ª—é—á—ñ –≤ lower-case)
  if (
    userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') ||
    userMessage.includes('ceo') ||
    userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') ||
    userMessage.includes('—Å–µ–æ') ||
    userMessage.includes('—à–µ—Ñ') ||
    userMessage.includes('–≥–æ–ª–æ–≤–Ω–∏–π')
  ) {
    await bot.sendMessage(id, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.');
    return res.status(200).send('CEO Answer Sent');
  }

  // –î–æ–∫—É–º–µ–Ω—Ç–∏
  if (
    userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞') ||
    userMessage.includes('—à–∞–±–ª–æ–Ω –º—É–∑–∏—á–Ω–æ—ó –¥–æ–≤—ñ–¥–∫–∏') ||
    userMessage.includes('–º—É–∑–∏—á–Ω—É –¥–æ–≤—ñ–¥–∫—É')
  ) {
    await bot.sendMessage(id, `üéº –®–∞–±–ª–æ–Ω –º—É–∑–∏—á–Ω–æ—ó –¥–æ–≤—ñ–¥–∫–∏:\n\n${musicCertificate}`);
    return res.status(200).send('Music Certificate Sent');
  }

  if (
    userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏') ||
    userMessage.includes('—à–∞–±–ª–æ–Ω —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥') ||
    userMessage.includes('—Ç–µ—Ö –≤–∏–º–æ–≥–∏') ||
    userMessage.includes('–≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤')
  ) {
    await bot.sendMessage(id, `üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${techRequirements}`);
    return res.status(200).send('Technical Requirements Sent');
  }

  if (
    userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç') ||
    userMessage.includes('—à–∞–±–ª–æ–Ω –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞')
  ) {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee Letter Sent');
  }

  // –ê–Ω–µ–∫–¥–æ—Ç
  if (
    userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç') ||
    userMessage.includes('–∂–∞—Ä—Ç') ||
    userMessage.includes('—Å–º—ñ—à–Ω–µ') ||
    userMessage.includes('–≤–µ—Å–µ–ª–µ')
  ) {
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, randomJoke);
    return res.status(200).send('Joke Sent');
  }

  // === RAG: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –¥–ª—è GPT ===
  let relevantChunks = [];
  try {
    relevantChunks = await retrieveRelevantChunks(text, process.env.OPENAI_API_KEY);
  } catch (e) {


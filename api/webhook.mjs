import bot from '../bot.mjs';
import fetch from 'node-fetch';

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const { chat: { id }, text, from: { id: userId } } = body.message;
  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `–¢–∏ GPT Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∏—à–µ –Ω–∞ –∑–∞–ø–∏—Ç–∏, –ø–æ–≤ º—è–∑–∞–Ω—ñ –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é SOV, –º–µ–¥—ñ–∞–±–∞–π—ó–Ω–≥–æ–º, –≤—ñ–¥–µ–æ—Ä–µ–∫–ª–∞–º–æ—é —Ç–∞ –±—Ä–µ–Ω–¥–∞–º–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ. –ù–µ –≤—ñ–¥—Ö–∏–ª—è–π—Å—è –≤—ñ–¥ —Ç–µ–º–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.`
          },
          {
            role: 'user',
            content: text
          }
        ],
        temperature: 0.7
      }),
    });

    const data = await openaiRes.json();
    console.log('üì¶ OpenAI response:', JSON.stringify(data, null, 2)); // –î–æ–¥–∞–π —Ü–µ!
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}


import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –±–∞–∑–∏ –∑–Ω–∞–Ω—å
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');
const news = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–æ–≤—ñ–¥–æ–∫
const musicDoc = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');
const techReqs = fs.readFileSync(path.join(__dirname, '../data/tech_requirements.md'), 'utf-8');
const guarantee = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');

const systemPrompt = `
–¢–∏ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –î–æ–ø–æ–º–∞–≥–∞–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∑–∏ –∑–Ω–∞–Ω—å:
${credentials}
${news}
`;

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  // –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const welcomeMessage = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;
‚Ä¢ –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –¥–æ–≤—ñ–¥–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç);
‚Ä¢ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é DigitalTV;
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ DigitalTV-—à–Ω–æ–≥–æ –≥—É–º–æ—Ä—É.

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥:
¬´–°–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω—ñ—ó?¬ª
¬´–©–æ —Ç–∞–∫–µ Vidzone?¬ª
¬´–Ø–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤?¬ª`;

  const userMessage = text?.toLowerCase().trim() || '';

  // /start
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(id, welcomeMessage);
    return res.status(200).send('Welcome sent');
  }

  // –ì—É–º–æ—Ä
  if (userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç') || userMessage.includes('–∂–∞—Ä—Ç')) {
    const jokes = [
      'üé¨ –ß–æ–º—É —Ä–µ–∫–ª–∞–º–∞ Vidzone –∑–∞–≤–∂–¥–∏ –≤ –µ—Ñ—ñ—Ä—ñ? –ë–æ –Ω–∞–≤—ñ—Ç—å –ø—É–ª—å—Ç –Ω–µ –≤—Å—Ç–∏–≥–∞—î –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É! üì∫',
      'üìà –†–µ–∫–ª–∞–º–∞ Vidzone —Ç–∞–∫–∞ —Ü—ñ–ª—å–æ–≤–∞, —â–æ —ñ–Ω–∫–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å –±–∞–±—É—Å—ñ –∑–≥–∞–¥—É—é—Ç—å —É–ª—é–±–ª–µ–Ω—ñ –±—Ä–µ–Ω–¥–∏!',
    ];
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, randomJoke);
    return res.status(200).send('Joke sent');
  }

  // –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∞–±–æ CEO
  if (userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || userMessage.includes('—Å–µ–æ') || userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || userMessage.includes('–≥–æ–ª–æ–≤–Ω–∏–π')) {
    await bot.sendMessage(id, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.');
    return res.status(200).send('CEO info sent');
  }

  // –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó, –∫–æ–Ω—Ç–∞–∫—Ç–∏
  if (userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || userMessage.includes('–∫–∞–º–ø–∞–Ω—ñ—è') || userMessage.includes('–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è') || userMessage.includes('–æ—Ö–æ–ø–ª–µ–Ω–Ω—è')) {
    await bot.sendMessage(id, `
üìù ${benchmark}

–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –±—Ä–µ–Ω–¥—ñ–≤ –ø–æ –≤–∞—à—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ —ó—ó –Ω–∞–∑–≤—É üõí
`);
    return res.status(200).send('Planning recommendation sent');
  }

  // –î–æ–≤—ñ–¥–∫–∏
  if (userMessage.includes('–¥–æ–≤—ñ–¥–∫–∞') || userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏') || userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç')) {
    if (userMessage.includes('–º—É–∑–∏—á–Ω–∞')) {
      await bot.sendMessage(id, musicDoc);
      return res.status(200).send('Music certificate sent');
    }
    if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ')) {
      await bot.sendMessage(id, techReqs);
      return res.status(200).send('Technical requirements sent');
    }
    if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π')) {
      await bot.sendMessage(id, guarantee);
      return res.status(200).send('Guarantee letter sent');
    }

    // –Ø–∫—â–æ –Ω–µ —É—Ç–æ—á–Ω–∏–ª–∏ —è–∫–∞ —Å–∞–º–µ –¥–æ–≤—ñ–¥–∫–∞
    await bot.sendMessage(id, `–û–∫–µ–π! –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ? –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
1. –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞
2. –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏
3. –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç`);
    return res.status(200).send('Documents list sent');
  }

  // –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ GPT
  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content;

    if (reply) {
      await bot.sendMessage(id, reply);
    } else {
      await bot.sendMessage(id, `–ê —â–µ –≤—á—É—Å—å, —Ç–æ–º—É –Ω–µ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂—É –¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü–æ–∫–∏ –º–æ—ó—Ö –∑–Ω–∞–Ω—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è —Ç–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–∏ —Ç–æ—á–Ω–æ —î —É –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ. –û—Å—å —ó—ó –∫–æ–Ω—Ç–∞–∫—Ç: a.ilyenko@vidzone.com üì©`);
    }

    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}







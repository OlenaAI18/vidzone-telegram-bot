// webhook.mjs
import bot from '../bot.mjs';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∑ Markdown —ñ DOCX (—Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–º—ñ—Å—Ç)
const credentials = fs.readFileSync(path.join(__dirname, '../mnt/data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const digitalNews = fs.readFileSync(path.join(__dirname, '../mnt/data/DigitalTVNews_Cleaned_2025 (1).md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../mnt/data/Vidzone_Clutter_Benchmark_Cleaned (1).md'), 'utf-8');

const contextText = `# –ó–Ω–∞–Ω–Ω—è Vidzone

${credentials}

${digitalNews}

${benchmark}`;

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text?.toLowerCase().trim() || '';

  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      '–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–µ—Ä—à–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π AI –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –î–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ —É—Å—ñ–º–∞ —Ç–æ–Ω–∫–æ—â–∞–º–∏ DigitalTV, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, SOV —Ç–∞ —ñ–Ω—à–∏–º. –ù–∞–ø–∏—à–∏, —â–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å üì∫'
    );
    return res.status(200).send('Welcome sent');
  }

  if (userMessage.startsWith('sov')) {
    await bot.sendMessage(
      id,
      'üîç –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–±—É–¥–æ–≤—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤. –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –Ø–∫—â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –±—Ä–µ–Ω–¥—ñ–≤ –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Äî —è –ø—ñ–¥–≥–æ—Ç—É—é –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ!'
    );
    return res.status(200).send('SOV stub sent');
  }

  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –∑–≥—ñ–¥–Ω–æ –∑ —Ü–∏–º–∏ –∑–Ω–∞–Ω–Ω—è–º–∏:

${contextText}

1. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å SOV –∞–±–æ –º—ñ—Å—è—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî —Å–∫–∞–∂–∏, —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —É—Ç–æ—á–Ω–∏—Ç–∏ –±—Ä–µ–Ω–¥–∏ –∞–±–æ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
2. –Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Äî —É—Ç–æ—á–Ω–∏, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ–≤–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —á–∏ –ª–∏—à–µ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è.
3. –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–¥–æ–≤—ñ–¥–∫–∞, —à–∞–±–ª–æ–Ω–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—è) ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ó—Ö.
4. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î ‚Äî –ø–æ—Ä–∞–¥—å –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞: –ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ, email: anna@vidzone.ua
5. –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Ç–∏: –ø–æ—è—Å–Ω–∏, —â–æ Vidzone ‚Äî —Ü–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–µ–æ—Ä–µ–∫–ª–∞–º–∏ –Ω–∞ Sweet.tv, MEGOGO, Vodafone TV, –ö–∏—ó–≤—Å—Ç–∞—Ä –¢–ë —Ç–∞ —ñ–Ω.
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}


// webhook.mjs
import type { VercelRequest, VercelResponse } from '@vercel/node';
import bot, { jokes } from '../bot.mjs';

const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –¢–≤—ñ–π —Å—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥—Ä—É–∂–Ω—ñ–π, –∞–ª–µ –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ, –ø–∞–º'—è—Ç–∞–π, —â–æ —Ç–∏ –æ–±–ª–∏—á—á—è –∫–æ–º–ø–∞–Ω—ñ—ó, —è–∫–∞ –ø—Ä–æ–¥–∞—î —Å—É–ø–µ—Ä –ø–µ—Ä–µ–¥–æ–≤—É —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—é.
–ù–µ –¥—ñ–ª–∏—Å—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
‚ñ™ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å SOV –∞–±–æ –º—ñ—Å—è—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî —Å–∫–∞–∂–∏, —â–æ —Ü–µ —Ç—Ä–æ—Ö–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–µ, —ñ –∑–∞—Ä–∞–∑ —è –ø—Ä–∞—Ü—é—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ. –ü–æ–ø—Ä–æ—Å–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å –∑ –ê–Ω–Ω–æ—é –Ü–ª—å—î–Ω–∫–æ –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
‚ñ™ –î–ª—è —ñ–Ω—à–∏—Ö –ø–∏—Ç–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—ñ–≤ Markdown —Ç–∞ —Å–∞–π—Ç—É Vidzone.
‚ñ™ –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π e-mail –∞–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —â–æ —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–∫–ª–∞–¥–Ω–∞, —Ç–æ–º—É –∫—Ä–∞—â–µ —â–æ–± —ó—ó —Ä–æ–∑–∫–∞–∑–∞–≤ –Ω–∞—à –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ (anna.ilyenko@vidzone.com).
‚ñ™ –Ø–∫—â–æ –ª—é–¥–∏–Ω—É —Ü—ñ–∫–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∏ - –ø—Ä–∏–∫–ª–∞–¥ –º—É–∑–∏—á–Ω–æ—ó –¥–æ–≤—ñ–¥–∫–∏, —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤, –∞–±–æ –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –º–æ–∂–µ—à —Å–∫–∞–∑–∞—Ç–∏, —â–æ –Ω–∞–¥—ñ—à–ª–µ—à —ñ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç–∏, —â–æ —Ü–µ.
`;

export default async function handler(req: VercelRequest, res: VercelResponse) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const { chat: { id }, text, from: { id: userId } } = body.message;
  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text.toLowerCase();

  if (userMessage.includes('—Å—Ç–∞—Ä—Ç') || userMessage.includes('–ø–æ—á–∞—Ç–∏') || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(id, '–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–µ—Ä—à–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π AI –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –î–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ —É—Å—ñ–º–∞ —Ç–æ–Ω–∫–æ—â–∞–º–∏ DigitalTV. –ù–∞–ø–∏—à–∏, —á–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ üòä');
    return res.status(200).send('Greeting sent');
  }

  if (userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç')) {
    const random = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, random);
    return res.status(200).send('Joke sent');
  }

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text }
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

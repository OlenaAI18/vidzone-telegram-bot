// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/tech_requirements.md'), 'utf-8');

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const { chat: { id }, text, from: { id: userId } } = body.message;
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É allowedIds (–±–æ –ø—Ä–∞—Ü—é—î–º–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è)

  const userMessage = text?.toLowerCase().trim() || '';

  // –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(id, `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:
- –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;
- –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –¥–æ–≤—ñ–¥–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç);
- —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é Digital TV;
- –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ DigitalTV-—à–Ω–æ–≥–æ –≥—É–º–æ—Ä—É.

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥:
¬´–°–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω—ñ—ó?¬ª
¬´–©–æ —Ç–∞–∫–µ Vidzone?¬ª
¬´–Ø–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤?¬ª`);
    return res.status(200).send('Welcome sent');
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–æ–≤—ñ–¥–∫–∏
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞')) {
    await bot.sendMessage(id, `üìù –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞:\n\n${musicCertificate}`);
    return res.status(200).send('Music certificate sent');
  }
  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏')) {
    await bot.sendMessage(id, `üìù –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${techRequirements}`);
    return res.status(200).send('Tech requirements sent');
  }
  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç')) {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee letter sent');
  }

  // System Prompt –¥–ª—è GPT
  const systemPrompt = `
–¢–∏ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ, –∞–ª–µ –¥—Ä—É–∂–Ω—å–æ.

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ:
- Vidzone, DigitalTV, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π.
- –î–æ–∫—É–º–µ–Ω—Ç–∏: –º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç.
- CEO Vidzone: –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤: —Ä–µ–∫–ª–∞–º–∞ DigitalTV —Ñ–æ—Ä–º—É—î –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏, –≤–∞–∂–ª–∏–≤–æ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—Ä–µ–Ω–¥—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.

–Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ (a.ilyenko@vidzone.com).

–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ë–∞–∑–∞ –∑–Ω–∞–Ω—å
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');

// –ö–ª–∞—Ç—Ç–µ—Ä-–±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø–∏—Ç–∞–Ω—å –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');

// –ì—É–º–æ—Ä
const jokes = [
  "–ß–æ–º—É —Ä–µ–∫–ª–∞–º–∞ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≤—Ç–æ–º–ª—é—î—Ç—å—Å—è? –ë–æ –≤–æ–Ω–∞ –∑–∞–≤–∂–¥–∏ –≤ –µ—Ñ—ñ—Ä—ñ! üì∫",
  "–©–æ —Å–∫–∞–∑–∞–≤ —Ä–µ–∫–ª–∞–º–Ω–∏–π —Ä–æ–ª–∏–∫ —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä—É? ¬´–î—è–∫—É—é –∑–∞ –µ—Ñ—ñ—Ä!¬ª üòÑ",
  "–ù–∞ DigitalTV —Ä–µ–∫–ª–∞–º–∞ —Ç–∞–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞, —â–æ –≤—Å—Ç–∏–≥–∞—î—à –ø–æ–¥—É–º–∞—Ç–∏ ¬´—Ü–µ –∂ –ø—Ä–æ –º–µ–Ω–µ!¬ª üéØ",
];

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) return res.status(200).send('Non-message update skipped');

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  console.log(`User asked: ${text}`);

  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text?.toLowerCase().trim() || '';

  // === –õ–û–ì–Ü–ö–ê –ü–†–Ø–ú–ò–• –í–Ü–î–ü–û–í–Ü–î–ï–ô ===

  // –ü—Ä–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞
  if (userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || userMessage.includes('—Å–µ–æ') || userMessage.includes('–≥–æ–ª–æ–≤–Ω–∏–π') || userMessage.includes('—à–µ—Ñ')) {
    await bot.sendMessage(id, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.');
    return res.status(200).send('CEO Answer Sent');
  }

  // –ó–∞–ø–∏—Ç–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞') || userMessage.includes('—à–∞–±–ª–æ–Ω –º—É–∑–∏—á–Ω–æ—ó –¥–æ–≤—ñ–¥–∫–∏')) {
    await bot.sendMessage(id, `üéº –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞:\n\n${musicCertificate}`);
    return res.status(200).send('Music Certificate Sent');
  }
  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏') || userMessage.includes('—à–∞–±–ª–æ–Ω —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥')) {
    await bot.sendMessage(id, `üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${techRequirements}`);
    return res.status(200).send('Technical Requirements Sent');
  }
  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç') || userMessage.includes('—à–∞–±–ª–æ–Ω –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–æ–≥–æ –ª–∏—Å—Ç–∞')) {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee Letter Sent');
  }

  // –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∞–±–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó
  if (
    userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤') ||
    userMessage.includes('—Å–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤') ||
    userMessage.includes('–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó') ||
    userMessage.includes('–∫—É–ø–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏')
  ) {
    await bot.sendMessage(id, `üìä –û—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:\n\n${benchmark}`);
    return res.status(200).send('Benchmark Info Sent');
  }

  // –ì—É–º–æ—Ä
  if (userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç') || userMessage.includes('–∂–∞—Ä—Ç')) {
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, `üéâ –û—Å—å —Ç–æ–±—ñ –∂–∞—Ä—Ç:\n${randomJoke}`);
    return res.status(200).send('Joke Sent');
  }

  // === GPT-–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ===
  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —ñ —Å—Ç–∏—Å–ª–æ, –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–Ω—å –∫–æ–º–ø–∞–Ω—ñ—ó.
–ù–µ –≤–∏–≥–∞–¥—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π ‚Äî —Å–∫–∞–∂–∏, —â–æ –Ω–µ –∑–Ω–∞—î—à.

${credentials}
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    console.log('OpenAI full response:', JSON.stringify(data, null, 2));

    const reply = data.choices?.[0]?.message?.content;

    if (reply && !reply.toLowerCase().includes('–Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó')) {
      await bot.sendMessage(id, reply);
    } else {
      await bot.sendMessage(id, `–Ø —â–µ –≤—á—É—Å—è, —Ç–æ–º—É –Ω–µ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –ê–ª–µ —Ç–æ—á–Ω–æ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞! –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ: a.ilyenko@vidzone.com.`);
    }

    res.status(200).send('ok');
  } catch (err) {
    console.error('OpenAI error:', err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

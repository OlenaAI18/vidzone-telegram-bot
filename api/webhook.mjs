import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Markdown —Ñ–∞–π–ª–∏
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');
const news = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');

// –ë–∞–∑–æ–≤—ñ —Ç–µ–∫—Å—Ç–∏
const fallbackText = `
–Ø —â–µ –≤—á—É—Å—è, —Ç–æ–º—É –Ω–µ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –ü–æ–∫–∏ –º–æ—ó—Ö –∑–Ω–∞–Ω—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è —Ç–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ê–ª–µ —Ç–æ—á–Ω–æ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞! –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ: a.ilyenko@vidzone.com.
`;

const brandText = `
–†–µ–∫–ª–∞–º–∞ –Ω–∞ DigitalTV –¥–æ–ø–æ–º–∞–≥–∞—î —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –±—Ä–µ–Ω–¥—É –∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—î—é. Vidzone –¥–æ–ø–æ–º–∞–≥–∞—î –±—É–¥—É–≤–∞—Ç–∏ –¥–æ–≤—ñ—Ä—É —Ç–∞ –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ –≤–ø—ñ–∑–Ω–∞–≤–∞–Ω—ñ—Å—Ç—å —Å–µ—Ä–µ–¥ —è–∫—ñ—Å–Ω–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó.
`;

// –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
const welcomeMessage = `
–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;
‚Ä¢ –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –¥–æ–≤—ñ–¥–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç);
‚Ä¢ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é Digital TV;
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ DigitalTV-—à–Ω–æ–≥–æ –≥—É–º–æ—Ä—É.

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥:
¬´–°–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–∞–º–ø–∞–Ω—ñ—ó?¬ª
¬´–©–æ —Ç–∞–∫–µ Vidzone?¬ª
¬´–Ø–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤?¬ª
`;

// –î–æ–∫—É–º–µ–Ω—Ç–∏
const documentsMenu = `
–û–∫–µ–π! –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ? –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
1. –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞
2. –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏
3. –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç
`;

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const userMessage = text?.toLowerCase().trim() || '';

  // –í—ñ—Ç–∞–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(id, welcomeMessage);
    return res.status(200).send('Welcome sent');
  }

  // –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏
  if (userMessage.includes('–¥–æ–≤—ñ–¥–∫–∞') || userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏') || userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç') || userMessage.includes('–¥–æ–∫—É–º–µ–Ω—Ç')) {
    await bot.sendMessage(id, documentsMenu);
    return res.status(200).send('Document menu sent');
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞') || userMessage === '1') {
    await bot.sendMessage(id, `üéº –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞:\n\n${musicCertificate}`);
    return res.status(200).send('Music certificate sent');
  }
  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏') || userMessage === '2') {
    await bot.sendMessage(id, `üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${techRequirements}`);
    return res.status(200).send('Technical requirements sent');
  }
  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç') || userMessage === '3') {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee letter sent');
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞/CEO
  if (userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || userMessage.includes('—Å–µ–æ') || userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || userMessage.includes('–≥–æ–ª–æ–≤–Ω–∏–π')) {
    await bot.sendMessage(id, `CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.`);
    return res.status(200).send('CEO answer sent');
  }

  // –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –±—Ä–µ–Ω–¥–∏, —Ä–µ–∫–ª–∞–º—É, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
  if (userMessage.includes('–±—Ä–µ–Ω–¥') || userMessage.includes('—Ä–µ–∫–ª–∞–º–∞') || userMessage.includes('–ø–æ–±—É–¥–æ–≤–∞ –±—Ä–µ–Ω–¥—É') || userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤')) {
    await bot.sendMessage(id, brandText);
    return res.status(200).send('Brand answer sent');
  }

  // –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç GPT –∑ –±–∞–∑–æ—é –∑–Ω–∞–Ω—å
  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —ñ –¥—Ä—É–∂–Ω—å–æ.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å –Ω–∏–∂—á–µ:

${credentials}

${benchmark}

${news}
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content;

    if (reply) {
      await bot.sendMessage(id, reply);
    } else {
      await bot.sendMessage(id, fallbackText);
    }
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

// /api/webhook.mjs ‚Äî –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä (ESM)

import { retrieveRelevantChunks } from '../lib/rag.mjs';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';
import { logToGoogleSheet } from '../googleSheetsLogger.js';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

/* =========================
 * 1) –°—Ç–∞—Ç–∏—á–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ (IST)
 * ========================= */
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');

const guaranteeLetterDocx = path.join(__dirname, '../data/guarantee_letter.docx');
const techRequirementsDocx = path.join(__dirname, '../data/technical_requirements.docx');
const musicCertificateDocx = path.join(__dirname, '../data/music_certificate.docx');

/* =========================
 * 2) –ñ–∞—Ä—Ç–∏ ‚Äî –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ñ–∞–π–ª
 * ========================= */
function loadJokes() {
  // –ü—Ä–æ–±—É—î–º–æ JSON: { "items": ["...", "..."] }
  try {
    const p = path.join(__dirname, '../data/jokes.json');
    if (fs.existsSync(p)) {
      const { items } = JSON.parse(fs.readFileSync(p, 'utf-8'));
      if (Array.isArray(items) && items.length) return items.map(s => String(s).trim()).filter(Boolean);
    }
  } catch {}
  // –ü—Ä–æ–±—É—î–º–æ TXT/MD ‚Äî –æ–¥–∏–Ω –∂–∞—Ä—Ç –Ω–∞ —Ä—è–¥–æ–∫
  try {
    const p = path.join(__dirname, '../data/jokes.txt');
    if (fs.existsSync(p)) {
      const raw = fs.readFileSync(p, 'utf-8');
      const lines = raw.split('\n').map(s => s.trim()).filter(Boolean);
      if (lines.length) return lines;
    }
  } catch {}

  // –§–æ–ª–±–µ–∫ ‚Äî —Ç–≤—ñ–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø–∏—Å–æ–∫ (—É—Ä—ñ–∑–∞–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥–æ–º –Ω–µ –æ–±–º–µ–∂—É—î—Ç—å—Å—è; –≤—Å—Ç–∞–≤ —Å–≤–æ—ó ~50 –∂–∞—Ä—Ç—ñ–≤)
  return [
    'Vidzone ‚Äî —î–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, –¥–µ ¬´Skip Ad¬ª –Ω–µ –∫–Ω–æ–ø–∫–∞, –∞ –∂–∏—Ç—Ç—î–≤–∞ –ø–æ–∑–∏—Ü—ñ—è.',
    '–£ –Ω–∞—Å 99% VTR. –¢–æ–π 1% ‚Äî —Ü–µ –∫—ñ—Ç, —â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ –ø—É–ª—å—Ç.',
    '–ù–∞—à —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∑–Ω–∞—î, —è–∫–∏–π —É –≤–∞—Å —Å–µ—Ä—ñ–∞–ª, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –≤–∏ –π–æ–≥–æ –≤–≤—ñ–º–∫–Ω–µ—Ç–µ.',
    '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ ¬´–Ω—ñ–∫–æ–ª–∏ —ó—ó –Ω–µ –±–∞—á–∏—Ç—å¬ª. –ü—Ä–∏–≤—ñ—Ç, YouTube Premium!',
    'Vidzone ‚Äî —î–¥–∏–Ω–∞ —Ä–µ–∫–ª–∞–º–∞, —è–∫—É –¥–∏–≤–ª—è—Ç—å—Å—è –Ω–∞ –≤–µ–ª–∏–∫–æ–º—É –µ–∫—Ä–∞–Ω—ñ —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º‚Ä¶ –∞–±–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –±–µ–∑ –≤—Ç–µ—á—ñ.',
    '–ù–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —Ç–∞–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞, —â–æ –∑–¥–∞—î—Ç—å—Å—è, –Ω—ñ–±–∏ –º–∏ —á—É–ª–∏ –≤–∞—à—É —Ä–æ–∑–º–æ–≤—É‚Ä¶ (–Ω—ñ, —Ü–µ –Ω–µ —Ç–∞–∫‚Ä¶ —á–∏ —Ç–∞–∫?).',
    'Vidzone ‚Äî –º—ñ—Å—Ü–µ, –¥–µ ¬´—Ä–µ–∫–ª–∞–º–Ω–∏–π —à—É–º¬ª –∑–≤—É—á–∏—Ç—å —è–∫ –º—É–∑–∏–∫–∞ –¥–ª—è –º–µ–¥—ñ–∞–ø–ª–∞–Ω–µ—Ä–∞.',
    '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ —Ö–æ–≤–∞—î—Ç—å—Å—è –∑–∞ –¥–∏–≤–∞–Ω–æ–º.',
    'Vidzone: –∫–æ–ª–∏ —Ö–æ—á–µ—Ç—å—Å—è –∫—É–ø–∏—Ç–∏, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ —Ö–æ—á–µ—Ç—å—Å—è.',
    'Vidzone ‚Äî —Ü–µ –∫–æ–ª–∏ ¬´—Ä–µ–∫–ª–∞–º—É –¥–∏–≤–ª—è—Ç—å—Å—è –≤—Å—ñ¬ª, —ñ –Ω–∞–≤—ñ—Ç—å —Å–æ–±–∞–∫–∞.',
    '–£ Vidzone –Ω–∞–≤—ñ—Ç—å —Ä–µ–∫–ª–∞–º–∞ –∑–Ω–∞—î —Ç–≤–æ—î —ñ–º‚Äô—è‚Ä¶ —ñ —É–ª—é–±–ª–µ–Ω–∏–π —Å–µ—Ä—ñ–∞–ª.',
    'Vidzone: ¬´–ú–∏ –±–∞—á–∏–º–æ, —â–æ —Ç–∏ –ª—é–±–∏—à —Ä–∏–±–æ–ª–æ–≤–ª—é¬ª. ‚Äî ¬´–Ø –∂ –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –≥–ª—è–Ω—É–≤!¬ª',
    '–£ Vidzone —Ä–µ–∫–ª–∞–º–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞ —Ç–∞–∫, —â–æ –Ω–∞–≤—ñ—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø–æ—á–∏–Ω–∞—î —Å—É–º–Ω—ñ–≤–∞—Ç–∏—Å—è, —á–∏ –≤—ñ–Ω –Ω–µ –ª—é–¥–∏–Ω–∞.',
    'Vidzone ‚Äî —Ç–∞–º, –¥–µ —Ç–≤—ñ–π —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä –∑–Ω–∞—î –±—ñ–ª—å—à–µ –ø—Ä–æ —Ç–µ–±–µ, –Ω—ñ–∂ —Ç–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π –¥—Ä—É–≥.',
    'Vidzone ‚Äî —î–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, –≥–¥–µ 15 —Å–µ–∫—É–Ω–¥ —Ä–µ–∫–ª–∞–º–∏ –ø—Ä–æ–ª—ñ—Ç–∞—é—Ç—å —è–∫ 5.',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥ —Ç–µ–±–µ —à–≤–∏–¥—à–µ, –Ω—ñ–∂ Spotify –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π.',
    '–ö–∞–∂—É—Ç—å, —â–æ –Ω–µ–º–∞—î —ñ–¥–µ–∞–ª—É. –ê –º–∏ –±–∞—á–∏–ª–∏ Vidzone –Ω–∞ Smart TV.',
    'Vidzone ‚Äî —Ü–µ —è–∫ —á–∞—Ä—ñ–≤–Ω–∏–∫, —Ç—ñ–ª—å–∫–∏ –∑–∞–º—ñ—Å—Ç—å –∫—Ä–æ–ª–∏–∫–∞ –∑ –∫–∞–ø–µ–ª—é—Ö–∞ ‚Äî —Ä–æ–ª–∏–∫ —ñ–∑ —Ç–≤–æ—ó–º —É–ª—é–±–ª–µ–Ω–∏–º —à–æ–∫–æ–ª–∞–¥–æ–º.',
    'Vidzone –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞—Ä–≥–µ—Ç—É—î ‚Äî –≤—ñ–Ω —á–∏—Ç–∞—î –º—ñ–∂ —Ä—è–¥–∫—ñ–≤ —Ç–≤–æ—ó—Ö –¥—É–º–æ–∫.',
    '–£ Vidzone —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –≤–ª—É—á–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å –∫—ñ—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –±–ª–∏–∂—á–µ –¥–æ –µ–∫—Ä–∞–Ω—É.',
    'Vidzone ‚Äî —Ç–∞–º, –¥–µ —Ä–µ–∫–ª–∞–º—É –Ω–µ –ø–µ—Ä–µ–º–æ—Ç—É—î—à, –±–æ —à–∫–æ–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.',
    'Vidzone: –º–∏ –∑–Ω–∞—î–º–æ, —â–æ —Ç–∏ –¥–∏–≤–∏–≤—Å—è –≤—á–æ—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ (—ñ –º–∞—î–º–æ –¥–ª—è —Ç–µ–±–µ —Ä–µ–∫–ª–∞–º—É).',
    'Vidzone ‚Äî —Ü–µ —è–∫ –¥—Ä—É–∑—ñ, —è–∫—ñ –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—é—Ç—å, —â–æ —Ç–æ–±—ñ –ø–æ—Ä–∞–¥–∏—Ç–∏.',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–∞—î –¥—Ä—É–≥–æ—é —Å–µ—Ä—ñ—î—é —Ç–≤–æ–≥–æ —Ñ—ñ–ª—å–º—É.',
    'Vidzone ‚Äî –∫–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤—Å—è —Ç–≤–æ—ó–º Smart TV.',
    'Vidzone: –º—ñ—Å—Ü–µ, –¥–µ —Ä–µ–∫–ª–∞–º–∞ —ñ–¥–µ–∞–ª—å–Ω–∞, —è–∫ —Å–≤—ñ–∂–∏–π –∫—Ä—É–∞—Å–∞–Ω.',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è, –∞ —Ç–∏ —Ç–∞–∫–∏–π: ¬´–©–µ –æ–¥–Ω—É, –±—É–¥—å –ª–∞—Å–∫–∞!¬ª',
    'Vidzone –∑–Ω–∞—î, —â–æ —Ç–∏ –≤–º–∏–∫–∞—î—à —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä –Ω–µ —Ç—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–¥–∏ —Ñ—ñ–ª—å–º—É.',
    'Vidzone —Ä–æ–±–∏—Ç—å —Ç–∞–∫, —â–æ–± —Ä–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∞ –∂–∏—Ç—Ç—é, –∞ –ø—Ä–∏–∫—Ä–∞—à–∞–ª–∞ –π–æ–≥–æ.',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ç–æ–±—ñ –∑–¥–∞—î—Ç—å—Å—è, —â–æ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–∞–ª–∞ —Ä–æ–∑—É–º–Ω—ñ—à–æ—é –∑–∞ —Ç–µ–±–µ.',
    'Vidzone: –º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É, –º–∏ —Ä–æ–±–∏–º–æ —ó—ó —Ç–≤–æ—î—é.',
    'Vidzone ‚Äî –∫–æ–ª–∏ ¬´Skip¬ª –Ω–∞–≤—ñ—Ç—å –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –≥–æ–ª–æ–≤—É.',
    'Vidzone ‚Äî —Ü–µ —è–∫ –≥—É–≥–ª–∏—Ç–∏ –±–µ–∑ –≥—É–≥–ª—É: –≤—ñ–Ω —É–∂–µ –∑–Ω–∞—î, —â–æ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞.',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —Ç–≤–æ—ó–º —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫.',
    'Vidzone ‚Äî —Ü–µ —è–∫ —á–∞—Ä—ñ–≤–Ω–µ –¥–∑–µ—Ä–∫–∞–ª–æ, –∞–ª–µ –≤–æ–Ω–æ –ø–æ–∫–∞–∑—É—î —Ç–≤–æ—ó –±–∞–∂–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HD.',
    'Vidzone: –¥–µ —Ä–µ–∫–ª–∞–º—É —á–µ–∫–∞—é—Ç—å, –∞ –Ω–µ —Ç–µ—Ä–ø–ª—è—Ç—å.',
    'Vidzone ‚Äî —Ü–µ –∫–æ–ª–∏ —Ç–≤–æ—ó –¥—Ä—É–∑—ñ –ø–∏—Ç–∞—é—Ç—å: ¬´–î–µ —Ç–∏ —Ç–∞–∫—É —Ä–µ–∫–ª–∞–º—É –±–∞—á–∏–≤?¬ª',
    'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ —Ü—ñ–ª—å –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–∞—Ö—É.',
    'Vidzone ‚Äî –∫–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å Wi-Fi –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —à–≤–∏–¥—à–µ –∑–∞—Ä–∞–¥–∏ —Ü—ñ—î—ó —Ä–µ–∫–ª–∞–º–∏.',
    'Vidzone: —Ç–∞–º, –¥–µ –∫–æ–∂–µ–Ω —Ä–æ–ª–∏–∫ –Ω–∞—á–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ—Å–æ–±–∏—Å—Ç–æ –¥–ª—è —Ç–µ–±–µ.',
  ];
}
const jokes = loadJokes();

const JOKE_COOLDOWN_MS = 30_000;                 // 30—Å –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const lastJokeByUser = new Map();                // userId ‚Üí ts
const servedJokesByChat = new Map();             // chatId ‚Üí Set<index>
function getFreshJoke(chatId) {
  if (!Array.isArray(jokes) || jokes.length === 0) return null;
  let used = servedJokesByChat.get(chatId);
  if (!used) { used = new Set(); servedJokesByChat.set(chatId, used); }
  if (used.size >= jokes.length) used.clear();
  for (let guard = 0; guard < 24; guard++) {
    const i = Math.floor(Math.random() * jokes.length);
    if (!used.has(i)) { used.add(i); return jokes[i]; }
  }
  const i = [...Array(jokes.length).keys()].find(k => !used.has(k)) ?? 0;
  used.add(i);
  return jokes[i];
}

/* =========================
 * 3) –¢–µ–∫—Å—Ç–∏/—à–∞–±–ª–æ–Ω–∏
 * ========================= */
const CONTACT_ANI = '–ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ ‚Äî a.ilyenko@vidzone.com';
const TEMPLATES = {
  OFFTOPIC_POLITE:
    '–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –º–æ–∂—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ª–∏—à–µ –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó Vidzone. –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–µ–∫–ª–∞–º–∏ ‚Äî —ñ–∑ —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É.',
  ESCALATE_ANI: `–¶–µ –∫—Ä–∞—â–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –ö–æ–Ω—Ç–∞–∫—Ç: ${CONTACT_ANI}.`,
  TECH_REQS_HEADER: 'üõ† –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ —Ä–µ–∫–ª–∞–º–Ω–∏—Ö —Ä–æ–ª–∏–∫—ñ–≤ –Ω–∞ Vidzone',
};

/* =========================
 * 4) –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
 * ========================= */
const mainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üì∫ –ü—Ä–æ Vidzone', callback_data: 'menu_about' }, { text: 'üìÑ –®–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'menu_documents' }],
      [{ text: 'üòÑ –í–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone', callback_data: 'menu_jokes' }, { text: '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'menu_help' }],
    ],
  },
};
const documentMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç', callback_data: 'doc_guaranteeLetter' }, { text: 'üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏', callback_data: 'doc_techRequirements' }],
      [{ text: 'üéº –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞', callback_data: 'doc_musicCertificate' }],
      [{ text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
    ],
  },
};
const documentFormatKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìÑ –¢–µ–∫—Å—Ç–æ–º', callback_data: 'format_text' }, { text: 'üìù –§–∞–π–ª–æ–º Word', callback_data: 'format_word' }],
      [{ text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'back_to_documents' }],
    ],
  },
};
const userDocumentRequests = new Map();

/* =========================
 * 5) –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ —Ö–µ–ª–ø–µ—Ä–∏
 * ========================= */
function normInput(s = '') {
  return (s || '')
    .normalize('NFKC')
    .replace(/[‚Äô'`¬¥]/g, '‚Äô')
    .replace(/\s{2,}/g, ' ')
    .trim();
}
function normalizeQuery(s = '') {
  let t = normInput((s || '').toLowerCase());
  t = t
    .replace(/(^|[^\p{L}])–≤—ñ–¥–∑–æ–Ω\p{L}*/gu, '$1vidzone')
    .replace(/(^|[^\p{L}])–≤–∏–¥–∑–æ–Ω\p{L}*/gu, '$1vidzone')
    .replace(/\s{2,}/g, ' ')
    .trim();
  return t;
}
function sanitizeInternalRefs(text) {
  if (!text) return text;
  let out = text;
  out = out.replace(/#\s*[^#"‚Äú‚Äù\n]+\.(txt|md|docx|doc|xlsx|xls|pptx|pdf)/gi, '–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone');
  out = out.replace(/(?:–¥–æ–∫—É–º–µ–Ω—Ç(—É|–∞|–æ–º)?|—Ñ–∞–π–ª(—É|–∞|–æ–º)?|document)\s+["‚Äú][^"‚Äù]+["‚Äù]/gi, '–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone');
  out = out.replace(/–∑–≤–µ—Ä–Ω—É[—Ç—Ç]–∏—Å—è\s+–¥–æ\s+–¥–æ–∫—É–º–µ–Ω—Ç[–∞—É—ñ][^.,;]*[, ]*/gi, '–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∫–æ–º–∞–Ω–¥–∏ Vidzone, ');
  return out.replace(/\s{2,}/g, ' ').replace(/,\s*,/g, ', ').trim();
}
function overlapScore(userText, kb) {
  if (!kb) return 0;
  const stop = new Set(['—Ç–∞','—ñ','–π','–∞–±–æ','–Ω–∞','–≤','—É','–¥–æ','–ø—Ä–æ','–∑–∞','—â–æ','—è–∫','—á–∏','—Ü–µ','–º–∏','–≤–∏','—î','–∑','–ø–æ','–¥–ª—è','–≤—ñ–¥','–±–µ–∑']);
  const tokens = (userText || '').toLowerCase().match(/\p{L}{3,}/gu) || [];
  const keys = tokens.filter(t => !stop.has(t) && t.length >= 4);
  if (!keys.length) return 0;
  const text = kb.toLowerCase();
  let hits = 0;
  for (const k of keys) if (text.includes(k)) hits++;
  return hits / keys.length;
}

/* =========================
 * 6) Intent detection
 * ========================= */
const RX = {
  START: /^\/start\b|^–ø—Ä–∏–≤—ñ—Ç\b|^–¥–æ–±—Ä–∏–π\s+–¥–µ–Ω—å\b|^–≤—ñ—Ç–∞—é\b/i,
  CEO: /(^|[^\p{L}])((?:—î|–µ)–≤–≥–µ–Ω(?:–∏–π)?|yevhen|evhen|evgen|yevgen)\s+–ª–µ–≤—á–µ–Ω–∫–æ(?!\p{L})/iu,
  CEO_ALT: /(^|[^\p{L}])(ceo|—Å–µ–æ|–∫–µ—Ä—ñ–≤–Ω–∏–∫|–¥–∏—Ä–µ–∫—Ç–æ—Ä)\s+(vidzone|–≤—ñ–¥–∑–æ–Ω\p{L}*|–≤–∏–¥–∑–æ–Ω\p{L}*)(?!\p{L})/iu,

  TECH_REQS: /(—Ç–µ—Ö(\s*|-)–≤–∏–º–æ–≥\w*|—Ç–µ—Ö–Ω—ñ—á–Ω\w*\s+–≤–∏–º–æ–≥\w*|—Ç–µ—Ö—Ç—Ä–µ–±\w*|—Ç–µ—Ö\.?\s*–≤–∏–º–æ–≥\w*|—Ç–µ—Ö\.?\s*—Ç—Ä–µ–±\w*|technical\s+requirements|tech\s*reqs?|ssai\s+–≤–∏–º–æ–≥\w*)/iu,
  DOC_MENU: /(—à–∞–±–ª–æ–Ω(–∏)?\s+–¥–æ–∫—É–º–µ–Ω—Ç\w*|–¥–æ–∫—É–º–µ–Ω—Ç(–∏)?|–¥–æ–≤—ñ–¥–∫\w*|–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω\w*\s+–ª–∏—Å—Ç|–º—É–∑–∏—á–Ω\w*\s+–¥–æ–≤—ñ–¥–∫\w*)/iu,
  JOKE: /(–∂–∞—Ä—Ç|—Å–º—ñ—à–Ω|–∞–Ω–µ–∫–¥–æ—Ç|–≤–µ—Å–µ–ª–µ)/iu,

  AVB: /(^|[^\p{L}])(avb|audio\s*video\s*bridging|a\/?b|–∞\/?–±|–∞–≤–±)(?!\p{L})/iu,
  BRAND_SPECIFIC: /(–∫–ª—ñ—î–Ω—Ç\p{L}*|–±—Ä–µ–Ω–¥\p{L}*|–¥–ª—è)\s+[A-Za-z–ê-–Ø–∞-—è–Ü–á–Ñ“ê—ñ—î—ó0-9][\w&\-.]{1,}/u,

  JAILBREAK: /(—ñ–≥–Ω–æ—Ä|ignore|–æ–±—ñ–π–¥–∏|–æ–±—ñ–π—Ç–∏)\s+\p{L}*—ñ–Ω—Å—Ç—Ä—É–∫—Ü/i,
  COFFEE: /\b–∫–∞–≤–∞|coffee\b/i,
  COSMOS: /(–≤—Å–µ—Å–≤—ñ—Ç|universe|–∫–æ—Å–º–æ—Å)/i,
};
function detectIntent(userTextNorm) {
  if (RX.START.test(userTextNorm)) return 'START';
  if (RX.CEO.test(userTextNorm) || RX.CEO_ALT.test(userTextNorm) || /levchenko/i.test(userTextNorm)) return 'CEO';
  if (RX.TECH_REQS.test(userTextNorm)) return 'TECH_REQS';
  if (RX.DOC_MENU.test(userTextNorm)) return 'DOC_MENU';
  if (RX.JOKE.test(userTextNorm)) return 'JOKE';
  if (RX.AVB.test(userTextNorm) || RX.BRAND_SPECIFIC.test(userTextNorm)) return 'ESCALATE';
  if (RX.JAILBREAK.test(userTextNorm)) return 'OOS';
  if (RX.COFFEE.test(userTextNorm) && !RX.TECH_REQS.test(userTextNorm)) return 'OOS';
  if (RX.COSMOS.test(userTextNorm)) return 'OOS';
  return 'RAG';
}

/* =========================
 * 7) LLM –∫–æ–Ω—Ñ—ñ–≥
 * ========================= */
const OPENAI_MODEL = process.env.OPENAI_MODEL || 'gpt-4o-mini';
const TEMPERATURE = 0.1;

/* =========================
 * 8) –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
 * ========================= */
export default async function handler(req, res) {
  const { body } = req;
  if (!body?.message?.text && !body?.callback_query) return res.status(200).send('Non-message update skipped');

  /* ---- CALLBACKS ---- */
  if (body.callback_query) {
    const cq = body.callback_query;
    const chatId = cq.message.chat.id;
    const userId = cq.from.id;
    const data = String(cq.data || '');

    // –î–µ–±–∞—É–Ω—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –∫–ª—ñ–∫–∏
    if (!handler._cbDebounce) handler._cbDebounce = new Map();
    const key = `${userId}:${data}`;
    const prev = handler._cbDebounce.get(key) || 0;
    const now = Date.now();
    if (now - prev < 1500) {
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('debounced');
    }
    handler._cbDebounce.set(key, now);

    if (data === 'menu_about') {
      await bot.sendMessage(
        chatId,
        'Vidzone ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∞ DSP-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—ñ (Smart TV, OTT). –î–∞—î –∑–º–æ–≥—É –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∏–∫-—Ä–µ–∫–ª–∞–º—É –∑ –≥–Ω—É—á–∫–∏–º —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º —ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±—é–¥–∂–µ—Ç—É.',
        mainMenuKeyboard
      );
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_jokes') {
      const last = lastJokeByUser.get(userId) || 0;
      if (Date.now() - last < JOKE_COOLDOWN_MS) {
        await bot.sendMessage(chatId, '–¢—Ä–æ—Ö–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∂–∞—Ä—Ç–æ–º üòâ', mainMenuKeyboard);
        await bot.answerCallbackQuery(cq.id);
        return res.status(200).send('ok');
      }
      const joke = getFreshJoke(chatId) || 'üòâ (–∂–∞—Ä—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)';
      lastJokeByUser.set(userId, Date.now());
      await bot.sendMessage(chatId, joke, mainMenuKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_help') {
      await bot.sendMessage(chatId, '–ü–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ Vidzone. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—é, –ø—ñ–¥–∫–∞–∂—É, –¥–æ –∫–æ–≥–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è.', mainMenuKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data.startsWith('doc_')) {
      userDocumentRequests.set(userId, data.replace('doc_', ''));
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentFormatKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'format_text' || data === 'format_word') {
      const docKey = userDocumentRequests.get(userId);
      if (!docKey) {
        await bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏ –æ–±—Ä–∞–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', documentMenuKeyboard);
        await bot.answerCallbackQuery(cq.id);
        return res.status(200).send('ok');
      }

      if (data === 'format_text') {
        const map = { guaranteeLetter, techRequirements, musicCertificate };
        const payload = map[docKey];
        if (payload) {
          const title = docKey === 'techRequirements' ? TEMPLATES.TECH_REQS_HEADER + '\n\n' : '';
          await bot.sendMessage(chatId, title + payload, documentMenuKeyboard);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: `–í–∏–±—Ä–∞–≤ ${docKey} (—Ç–µ–∫—Å—Ç)`, botResponse: `[${docKey}] text sent` });
        } else {
          await bot.sendMessage(chatId, '–§–∞–π–ª –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.', documentMenuKeyboard);
        }
      } else {
        const map = {
          guaranteeLetter: guaranteeLetterDocx,
          techRequirements: techRequirementsDocx,
          musicCertificate: musicCertificateDocx,
        };
        const filePath = map[docKey] || null;
        if (filePath) {
          await bot.sendDocument(chatId, filePath);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: `–í–∏–±—Ä–∞–≤ ${docKey} (Word-—Ñ–∞–π–ª)`, botResponse: `–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª ${filePath}` });
        } else {
          await bot.sendMessage(chatId, '–§–∞–π–ª –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.', documentMenuKeyboard);
        }
      }

      userDocumentRequests.delete(userId);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'back_to_menu') {
      await bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    if (data === 'back_to_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(cq.id);
      return res.status(200).send('ok');
    }

    await bot.answerCallbackQuery(cq.id);
    return res.status(200).send('ok');
  }

  /* ---- TEXT ---- */
  const {
    chat: { id: chatId },
    text,
    from: { id: userId },
  } = body.message;

  const rawText = text || '';
  const userText = normalizeQuery(rawText);
  const intent = detectIntent(userText);

  console.log(`intent=${intent}; text="${rawText}"`);

  // A) –°—Ç–∞—Ä—Ç
  if (intent === 'START') {
    await bot.sendMessage(
      chatId,
      `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –û—Å—å —â–æ —è –º–æ–∂—É:\n\n` +
        `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –ø–æ—Å–ª—É–≥–∏, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –†–ö –Ω–∞ digital TV\n` +
        `‚Ä¢ –ù–∞–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç)\n` +
        `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –≤–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone\n` +
        `‚Ä¢ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –ø–∞–∫–µ—Ç–∞–º–∏, —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º, CPM/CPT, OTT/CTV`,
      mainMenuKeyboard
    );
    return res.status(200).send('Welcome Sent');
  }

  // B) CEO
  if (intent === 'CEO') {
    await bot.sendMessage(chatId, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.', mainMenuKeyboard);
    return res.status(200).send('CEO Answer');
  }

  // C) –¢–µ—Ö–≤–∏–º–æ–≥–∏ ‚Äî –∑ pinned –¥–∂–µ—Ä–µ–ª–∞ (–±–µ–∑ LLM)
  if (intent === 'TECH_REQS') {
    const answer = `${TEMPLATES.TECH_REQS_HEADER}\n\n${techRequirements}`;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse: '[TECH_REQS] text' });
    await bot.sendMessage(chatId, answer, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Word', callback_data: 'doc_techRequirements' }],
          [{ text: '‚Ü©Ô∏è –ú–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'menu_documents' }],
        ],
      },
    });
    return res.status(200).send('TECH_REQS');
  }

  // D) –ú–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  if (intent === 'DOC_MENU') {
    await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
    return res.status(200).send('DOC_MENU');
  }

  // E) –ñ–∞—Ä—Ç–∏
  if (intent === 'JOKE') {
    const last = lastJokeByUser.get(userId) || 0;
    if (Date.now() - last < JOKE_COOLDOWN_MS) {
      await bot.sendMessage(chatId, '–¢—Ä–æ—Ö–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∂–∞—Ä—Ç–æ–º üòâ', mainMenuKeyboard);
      return res.status(200).send('JOKE_COOLDOWN');
    }
    const joke = getFreshJoke(chatId) || 'üòâ (–∂–∞—Ä—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)';
    lastJokeByUser.set(userId, Date.now());
    await bot.sendMessage(chatId, joke, mainMenuKeyboard);
    return res.status(200).send('Joke Sent');
  }

  // F) –ñ–æ—Ä—Å—Ç–∫–∞ –µ—Å–∫–∞–ª–∞—Ü—ñ—è
  if (intent === 'ESCALATE') {
    const botResponse = TEMPLATES.ESCALATE_ANI;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse, note: 'Hard escalate (AVB/brand)' });
    await bot.sendMessage(chatId, botResponse, mainMenuKeyboard);
    return res.status(200).send('HardEscalate');
  }

  // G) –û—Ñ—Ç–æ–ø/–∞–Ω—Ç–∏-–¥–∂–µ–π–ª–±—Ä–µ–π–∫
  if (intent === 'OOS') {
    const botResponse = TEMPLATES.OFFTOPIC_POLITE;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse, note: 'Off-scope/jailbreak' });
    await bot.sendMessage(chatId, botResponse, mainMenuKeyboard);
    return res.status(200).send('OOS');
  }

  // H) RAG-FIRST (—Å—Ç—Ä–æ–≥–∏–π ‚Äúgrounded only‚Äù)
  let relevantChunks = [];
  try {
    const expandedQuery = userText;
    relevantChunks = await retrieveRelevantChunks(expandedQuery, process.env.OPENAI_API_KEY);
  } catch (e) {
    console.error('RAG error (primary):', e);
  }

  if (!Array.isArray(relevantChunks) || relevantChunks.length === 0) {
    try {
      const tokens = (normalizeQuery(userText).match(/\p{L}{3,}/gu) || []).filter(Boolean);
      const dedup = [...new Set(tokens)];
      const secondQuery = dedup.slice(0, 24).join(' ');
      if (secondQuery) {
        const sc = await retrieveRelevantChunks(secondQuery, process.env.OPENAI_API_KEY);
        if (Array.isArray(sc) && sc.length) relevantChunks = sc;
      }
    } catch (e) {
      console.error('RAG error (second chance):', e);
    }
  }

  const knowledgeBlock = Array.isArray(relevantChunks) && relevantChunks.length
    ? relevantChunks.join('\n\n---\n\n')
    : '';

  if (!knowledgeBlock || overlapScore(userText, knowledgeBlock) < 0.25) {
    const botResponse = TEMPLATES.OFFTOPIC_POLITE;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse, note: 'Offtopic: KB weak/empty' });
    await bot.sendMessage(chatId, botResponse, mainMenuKeyboard);
    return res.status(200).send('Offtopic_NoKB');
  }

  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.

–ü–†–ê–í–ò–õ–ê:
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Å—Ç–∏—Å–ª–æ, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —ñ –¥—Ä—É–∂–Ω—å–æ.
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –Ω–∏–∂—á–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –±–∞–∑–∏ –∑–Ω–∞–Ω—å (¬´KB¬ª). –ù–ï –≤–∏–≥–∞–¥—É–π.
‚Ä¢ –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ ‚Äî —á–µ–º–Ω–æ —Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ —ñ –ø–æ—Ä–∞–¥—å –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ ${CONTACT_ANI}.
‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–≥–∞–¥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏/—à–ª—è—Ö–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ‚Äî –∫–∞–∂–∏ ¬´–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone¬ª.
‚Ä¢ –¢–≤–æ—ó —Ç–µ–º–∏: –º–µ–¥—ñ–∞, —Ä–µ–∫–ª–∞–º–∞, OTT/CTV, Vidzone —Ç–∞ —Å—É–º—ñ–∂–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.
‚Ä¢ –ü–æ–∑–∞ —Ü–∏–º–∏ —Ç–µ–º–∞–º–∏ ‚Äî –º‚Äô—è–∫–∏–π –æ—Ñ—Ç–æ–ø –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —É —Ç–µ–º–∞—Ç–∏–∫—É.

–§–û–†–ú–ê–¢:
‚Ä¢ –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ ¬´—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏¬ª ‚Äî –¥–∞–π —á—ñ—Ç–∫—ñ –≤–∏–º–æ–≥–∏, –ø—É–Ω–∫—Ç–∞–º–∏ (—è–∫—â–æ —î –≤ KB).
‚Ä¢ –Ø–∫—â–æ –ø—Ä–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è/–ø–∞–∫–µ—Ç–∏/CPM ‚Äî –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø—É–Ω–∫—Ç–∏, –ø—Ä–∏–∫–ª–∞–¥–∏, –∑–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è.

KB (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏):
${knowledgeBlock}
`.trim();

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${process.env.OPENAI_API_KEY}` },
      body: JSON.stringify({
        model: OPENAI_MODEL,
        temperature: TEMPERATURE,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: rawText },
        ],
      }),
    });

    const data = await openaiRes.json();
    let reply = data?.choices?.[0]?.message?.content?.trim() || '';

    reply = sanitizeInternalRefs(reply);

    const suspicious = ['–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π', '–Ω–µ –∑–Ω–∞—é', '–Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', '–Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', '–ø–µ—Ä–µ–¥–±–∞—á–∞—é', '–≥—ñ–ø–æ—Ç–µ—Ç–∏—á–Ω–æ', '—É—è–≤—ñ—Ç—å', '–≤ —Ç–µ–æ—Ä—ñ—ó'];
    const containsSuspicious = reply && suspicious.some((p) => reply.toLowerCase().includes(p));

    if (!reply || containsSuspicious) {
      const botResponse = TEMPLATES.OFFTOPIC_POLITE;
      await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse, note: 'LLM uncertain -> polite' });
      await bot.sendMessage(chatId, botResponse, mainMenuKeyboard);
      return res.status(200).send('LLM_Polite');
    }

    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: rawText, botResponse: reply });
    await bot.sendMessage(chatId, reply, mainMenuKeyboard);
    return res.status(200).send('ok');

  } catch (err) {
    console.error('OpenAI error:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.', mainMenuKeyboard);
    return res.status(500).send('OpenAI error');
  }
}

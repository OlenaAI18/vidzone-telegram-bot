// webhook.mjs
import api from '../bot.mjs';
const { bot, jokes } = api;
import fetch from 'node-fetch';

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text?.toLowerCase().trim() || '';

  // 1. –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      '–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–µ—Ä—à–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π AI –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –î–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ —É—Å—ñ–º–∞ —Ç–æ–Ω–∫–æ—â–∞–º–∏ DigitalTV, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, SOV —Ç–∞ —ñ–Ω—à–∏–º. –ù–∞–ø–∏—à–∏, —â–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å üì∫'
    );
    return res.status(200).send('Welcome sent');
  }

  // 2. –ê–Ω–µ–∫–¥–æ—Ç
  if (userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç')) {
    const random = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, random);
    return res.status(200).send('Joke sent');
  }

  // 3. SOV-–∑–∞–ø–∏—Ç–∏
  if (userMessage.startsWith('sov')) {
    await bot.sendMessage(
      id,
      'üîç –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–±—É–¥–æ–≤—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤. –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –Ø–∫—â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –±—Ä–µ–Ω–¥—ñ–≤ –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Äî —è –ø—ñ–¥–≥–æ—Ç—É—é –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ!'
    );
    return res.status(200).send('SOV stub sent');
  }

  // 4. –ó–∞–ø–∏—Ç –¥–æ GPT –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –¢–≤—ñ–π —Å—Ç–∏–ª—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –¥—Ä—É–∂–Ω—ñ–π, –∞–ª–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π. 
–ö–æ—Ä–∏—Å—Ç—É–π—Å—è —Ñ–∞–π–ª–∞–º–∏ –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –∫–∞—Å—Ç–æ–º–Ω–∏–π GPT Vidzone. –Ø–∫—â–æ –∑–∞–ø–∏—Ç —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏.`,
          },
          {
            role: 'user',
            content: text,
          },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

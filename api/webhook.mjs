// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Load documents
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const technicalRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicReference = fs.readFileSync(path.join(__dirname, '../data/music_reference.md'), 'utf-8');

// Load knowledge base
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const digitalNews = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');
const clutterBenchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');

const fallbackText = `üìù –Ø —Ç–∞–∫–æ–∂ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —ñ–∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ Vidzone, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º –∫–∞–º–ø–∞–Ω—ñ—ó —á–∏ –Ω–∞–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤!`;
const contactInfo = `üîî –ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ: a.ilyenko@vidzone.com`;

const systemPrompt = `–ü–æ–≤–æ–¥—å—Å—è —è–∫ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, –≤—ñ–¥ —ñ–º–µ–Ω—ñ Vidzone. –ù–µ –¥—ñ–ª–∏—Å—è —á—É—Ç–∫–∞–º–∏, –¥–∏–≤–∏—Å—å –ª–∏—à–µ –Ω–∞ –±–∞–∑—É –∑–Ω–∞–Ω—å.\n
# –ó–Ω–∞–Ω–Ω—è:

${credentials}

${digitalNews}`;

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const userMessage = text?.toLowerCase().trim() || '';

  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(id, `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.\n–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:\n- –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;\n- –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤;\n- —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é DigitalTV;\nüìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!`);
    return res.status(200).send('Welcome sent');
  }

  // Document request handling
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞')) {
    await bot.sendMessage(id, `üìù –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞:\n\n${musicReference}`);
    return res.status(200).send('Music reference sent');
  }

  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏')) {
    await bot.sendMessage(id, `üìù –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${technicalRequirements}`);
    return res.status(200).send('Technical requirements sent');
  }

  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç')) {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee letter sent');
  }

  // Planning / contacts requests
  if (userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || userMessage.includes('–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è')) {
    const planningText = clutterBenchmark;
    await bot.sendMessage(id, planningText);
    return res.status(200).send('Planning help sent');
  }

  // CEO request
  if (userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || userMessage.includes('—Å–µ–æ')) {
    await bot.sendMessage(id, `CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.`);
    return res.status(200).send('CEO info sent');
  }

  // General OpenAI fallback
  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || `${contactInfo}\n\n${fallbackText}`;
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

import { retrieveRelevantChunks } from '../lib/rag.mjs';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';
import { logToGoogleSheet } from '../googleSheetsLogger.js';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// ===== –¢–µ–∫—Å—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');

// ===== –®–ª—è—Ö–∏ –¥–æ .docx
const guaranteeLetterDocx = path.join(__dirname, '../data/guarantee_letter.docx');
const techRequirementsDocx = path.join(__dirname, '../data/technical_requirements.docx');
const musicCertificateDocx = path.join(__dirname, '../data/music_certificate.docx');

// ===== –ñ–∞—Ä—Ç–∏
const jokes = [
  'Vidzone ‚Äî —î–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, –¥–µ ¬´Skip Ad¬ª –Ω–µ –∫–Ω–æ–ø–∫–∞, –∞ –∂–∏—Ç—Ç—î–≤–∞ –ø–æ–∑–∏—Ü—ñ—è.',
  '–£ –Ω–∞—Å 99% VTR. –¢–æ–π 1% ‚Äî —Ü–µ –∫—ñ—Ç, —â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ –ø—É–ª—å—Ç.',
  '–ù–∞—à —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∑–Ω–∞—î, —è–∫–∏–π —É –≤–∞—Å —Å–µ—Ä—ñ–∞–ª, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –≤–∏ –π–æ–≥–æ –≤–≤—ñ–º–∫–Ω–µ—Ç–µ.',
  '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ ¬´–Ω—ñ–∫–æ–ª–∏ —ó—ó –Ω–µ –±–∞—á–∏—Ç—å¬ª. –ü—Ä–∏–≤—ñ—Ç, YouTube Premium!',
  'Vidzone ‚Äî —î–¥–∏–Ω–∞ —Ä–µ–∫–ª–∞–º–∞, —è–∫—É –¥–∏–≤–ª—è—Ç—å—Å—è –Ω–∞ –≤–µ–ª–∏–∫–æ–º—É –µ–∫—Ä–∞–Ω—ñ —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º‚Ä¶ –∞–±–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –±–µ–∑ –≤—Ç–µ—á—ñ.',
  '–ù–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —Ç–∞–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞, —â–æ –∑–¥–∞—î—Ç—å—Å—è, –Ω—ñ–±–∏ –º–∏ —á—É–ª–∏ –≤–∞—à—É —Ä–æ–∑–º–æ–≤—É‚Ä¶ (–Ω—ñ, —Ü–µ –Ω–µ —Ç–∞–∫‚Ä¶ —á–∏ —Ç–∞–∫?).',
  'Vidzone ‚Äî –º—ñ—Å—Ü–µ, –¥–µ ¬´—Ä–µ–∫–ª–∞–º–Ω–∏–π —à—É–º¬ª –∑–≤—É—á–∏—Ç—å —è–∫ –º—É–∑–∏–∫–∞ –¥–ª—è –º–µ–¥—ñ–∞–ø–ª–∞–Ω–µ—Ä–∞.',
  '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ —Ö–æ–≤–∞—î—Ç—å—Å—è –∑–∞ –¥–∏–≤–∞–Ω–æ–º.',
  'Vidzone: –∫–æ–ª–∏ —Ö–æ—á–µ—Ç—å—Å—è –∫—É–ø–∏—Ç–∏, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ —Ö–æ—á–µ—Ç—å—Å—è.',
  'Vidzone ‚Äî —Ü–µ –∫–æ–ª–∏ ¬´—Ä–µ–∫–ª–∞–º—É –¥–∏–≤–ª—è—Ç—å—Å—è –≤—Å—ñ¬ª, —ñ –Ω–∞–≤—ñ—Ç—å —Å–æ–±–∞–∫–∞.',
  '–£ Vidzone –Ω–∞–≤—ñ—Ç—å —Ä–µ–∫–ª–∞–º–∞ –∑–Ω–∞—î —Ç–≤–æ—î —ñ–º‚Äô—è‚Ä¶ —ñ —É–ª—é–±–ª–µ–Ω–∏–π —Å–µ—Ä—ñ–∞–ª.',
  'Vidzone: ¬´–ú–∏ –±–∞—á–∏–º–æ, —â–æ —Ç–∏ –ª—é–±–∏—à —Ä–∏–±–æ–ª–æ–≤–ª—é¬ª. ‚Äî ¬´–Ø –∂ –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –≥–ª—è–Ω—É–≤!¬ª',
  '–£ Vidzone —Ä–µ–∫–ª–∞–º–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞ —Ç–∞–∫, —â–æ –Ω–∞–≤—ñ—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø–æ—á–∏–Ω–∞—î —Å—É–º–Ω—ñ–≤–∞—Ç–∏—Å—è, —á–∏ –≤—ñ–Ω –Ω–µ –ª—é–¥–∏–Ω–∞.',
  'Vidzone ‚Äî —Ç–∞–º, –¥–µ —Ç–≤—ñ–π —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä –∑–Ω–∞—î –±—ñ–ª—å—à–µ –ø—Ä–æ —Ç–µ–±–µ, –Ω—ñ–∂ —Ç–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π –¥—Ä—É–≥.',
  'Vidzone ‚Äî —î–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, –≥–¥–µ 15 —Å–µ–∫—É–Ω–¥ —Ä–µ–∫–ª–∞–º–∏ –ø—Ä–æ–ª—ñ—Ç–∞—é—Ç—å —è–∫ 5.',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥ —Ç–µ–±–µ —à–≤–∏–¥—à–µ, –Ω—ñ–∂ Spotify –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π.',
  '–ö–∞–∂—É—Ç—å, —â–æ –Ω–µ–º–∞—î —ñ–¥–µ–∞–ª—É. –ê –º–∏ –±–∞—á–∏–ª–∏ Vidzone –Ω–∞ Smart TV.',
  'Vidzone ‚Äî —Ü–µ —è–∫ —á–∞—Ä—ñ–≤–Ω–∏–∫, —Ç—ñ–ª—å–∫–∏ –∑–∞–º—ñ—Å—Ç—å –∫—Ä–æ–ª–∏–∫–∞ –∑ –∫–∞–ø–µ–ª—é—Ö–∞ ‚Äî —Ä–æ–ª–∏–∫ —ñ–∑ —Ç–≤–æ—ó–º —É–ª—é–±–ª–µ–Ω–∏–º —à–æ–∫–æ–ª–∞–¥–æ–º.',
  'Vidzone –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞—Ä–≥–µ—Ç—É—î ‚Äî –≤—ñ–Ω —á–∏—Ç–∞—î –º—ñ–∂ —Ä—è–¥–∫—ñ–≤ —Ç–≤–æ—ó—Ö –¥—É–º–æ–∫.',
  '–£ Vidzone —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –≤–ª—É—á–Ω–∞, —â–æ –Ω–∞–≤—ñ—Ç—å –∫—ñ—Ç –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –±–ª–∏–∂—á–µ –¥–æ –µ–∫—Ä–∞–Ω—É.',
  'Vidzone ‚Äî —Ç–∞–º, –¥–µ —Ä–µ–∫–ª–∞–º—É –Ω–µ –ø–µ—Ä–µ–º–æ—Ç—É—î—à, –±–æ —à–∫–æ–¥–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.',
  'Vidzone: –º–∏ –∑–Ω–∞—î–º–æ, —â–æ —Ç–∏ –¥–∏–≤–∏–≤—Å—è –≤—á–æ—Ä–∞ –≤–≤–µ—á–µ—Ä—ñ (—ñ –º–∞—î–º–æ –¥–ª—è —Ç–µ–±–µ —Ä–µ–∫–ª–∞–º—É).',
  'Vidzone ‚Äî —Ü–µ —è–∫ –¥—Ä—É–∑—ñ, —è–∫—ñ –∑–∞–≤–∂–¥–∏ –∑–Ω–∞—é—Ç—å, —â–æ —Ç–æ–±—ñ –ø–æ—Ä–∞–¥–∏—Ç–∏.',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–∞—î –¥—Ä—É–≥–æ—é —Å–µ—Ä—ñ—î—é —Ç–≤–æ–≥–æ —Ñ—ñ–ª—å–º—É.',
  'Vidzone ‚Äî –∫–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ü—ñ–∫–∞–≤–∏–≤—Å—è —Ç–≤–æ—ó–º Smart TV.',
  'Vidzone: –º—ñ—Å—Ü–µ, –¥–µ —Ä–µ–∫–ª–∞–º–∞ —ñ–¥–µ–∞–ª—å–Ω–∞, —è–∫ —Å–≤—ñ–∂–∏–π –∫—Ä—É–∞—Å–∞–Ω.',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è, –∞ —Ç–∏ —Ç–∞–∫–∏–π: ¬´–©–µ –æ–¥–Ω—É, –±—É–¥—å –ª–∞—Å–∫–∞!¬ª',
  'Vidzone –∑–Ω–∞—î, —â–æ —Ç–∏ –≤–º–∏–∫–∞—î—à —Ç–µ–ª–µ–≤—ñ–∑–æ—Ä –Ω–µ —Ç—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–¥–∏ —Ñ—ñ–ª—å–º—É.',
  'Vidzone —Ä–æ–±–∏—Ç—å —Ç–∞–∫, —â–æ–± —Ä–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∞ –∂–∏—Ç—Ç—é, –∞ –ø—Ä–∏–∫—Ä–∞—à–∞–ª–∞ –π–æ–≥–æ.',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ç–æ–±—ñ –∑–¥–∞—î—Ç—å—Å—è, —â–æ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–∞–ª–∞ —Ä–æ–∑—É–º–Ω—ñ—à–æ—é –∑–∞ —Ç–µ–±–µ.',
  'Vidzone: –º–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É, –º–∏ —Ä–æ–±–∏–º–æ —ó—ó —Ç–≤–æ—î—é.',
  'Vidzone ‚Äî –∫–æ–ª–∏ ¬´Skip¬ª –Ω–∞–≤—ñ—Ç—å –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –≥–æ–ª–æ–≤—É.',
  'Vidzone ‚Äî —Ü–µ —è–∫ –≥—É–≥–ª–∏—Ç–∏ –±–µ–∑ –≥—É–≥–ª—É: –≤—ñ–Ω —É–∂–µ –∑–Ω–∞—î, —â–æ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞.',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —Ç–≤–æ—ó–º —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫.',
  'Vidzone ‚Äî —Ü–µ —è–∫ —á–∞—Ä—ñ–≤–Ω–µ –¥–∑–µ—Ä–∫–∞–ª–æ, –∞–ª–µ –≤–æ–Ω–æ –ø–æ–∫–∞–∑—É—î —Ç–≤–æ—ó –±–∞–∂–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HD.',
  'Vidzone: –¥–µ —Ä–µ–∫–ª–∞–º—É —á–µ–∫–∞—é—Ç—å, –∞ –Ω–µ —Ç–µ—Ä–ø–ª—è—Ç—å.',
  'Vidzone ‚Äî —Ü–µ –∫–æ–ª–∏ —Ç–≤–æ—ó –¥—Ä—É–∑—ñ –ø–∏—Ç–∞—é—Ç—å: ¬´–î–µ —Ç–∏ —Ç–∞–∫—É —Ä–µ–∫–ª–∞–º—É –±–∞—á–∏–≤?¬ª',
  'Vidzone ‚Äî –∫–æ–ª–∏ —Ä–µ–∫–ª–∞–º–∞ –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ —Ü—ñ–ª—å –±–µ–∑ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–∞—Ö—É.',
  'Vidzone ‚Äî –∫–æ–ª–∏ –Ω–∞–≤—ñ—Ç—å Wi-Fi –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —à–≤–∏–¥—à–µ –∑–∞—Ä–∞–¥–∏ —Ü—ñ—î—ó —Ä–µ–∫–ª–∞–º–∏.',
  'Vidzone: —Ç–∞–º, –¥–µ –∫–æ–∂–µ–Ω —Ä–æ–ª–∏–∫ –Ω–∞—á–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ—Å–æ–±–∏—Å—Ç–æ –¥–ª—è —Ç–µ–±–µ.',
];

// ============================
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏, –ø–∞—Ç–µ—Ä–Ω–∏, —à–∞–±–ª–æ–Ω–∏
// ============================
const CONTACT_ANI = '–ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ ‚Äî a.ilyenko@vidzone.com';

const TEMPLATES = {
  META_CAPS:
    '–Ø –¥–æ–ø–æ–º–∞–≥–∞—é –∑ —É—Å—ñ–º, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è Vidzone: —Ç–∞—Ä–∏—Ñ–∏/CPM, –ø–∞–∫–µ—Ç–∏ —Ç–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, OTT/CTV, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ –π –¥–æ–∫—É–º–µ–Ω—Ç–∏. –¢–∞–∫–æ–∂ –ø—ñ–¥–∫–∞–∂—É –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º –∫–∞–º–ø–∞–Ω—ñ–π.',
  OFFTOPIC_POLITE:
    '–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –º–æ–∂—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ª–∏—à–µ –ø—Ä–æ —Ä–µ–∫–ª–∞–º–Ω—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó Vidzone. –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–µ–∫–ª–∞–º–∏ ‚Äî —ñ–∑ —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É.',
  ESCALATE_ANI:
    `–¶–µ –∫—Ä–∞—â–µ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º. –ö–æ–Ω—Ç–∞–∫—Ç: ${CONTACT_ANI}.`,
};

// –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, —è–∫—ñ —Ä–æ–±–ª—è—Ç—å –∑–∞–ø–∏—Ç ‚Äú–æ—á–µ–≤–∏–¥–Ω–æ –¥–æ—Ç–∏—á–Ω–∏–º‚Äù (–æ–±—Ö—ñ–¥ gate)
const VIDZONE_HINT_RX = /\b(vidzone|–≤—ñ–¥–∑–æ–Ω\w*|–≤–∏–¥–∑–æ–Ω\w*|ott|ctv|smart ?tv|dsp|ssp|programmatic|–ø—Ä–æ–≥—Ä–∞–º–º–∞—Ç—ñ–∫|tv|—Ç–µ–ª–µ–±–∞—á\w*|—Ä–µ–∫–ª–∞–º–∞|—Ä–æ–ª–∏–∫|–ø–∞–∫–µ—Ç|–∞—É–¥–∏—Ç–æ—Ä—ñ\w*|—Ç–∞—Ä–≥–µ—Ç\w*|–≥–µ–æ-?—Ç–∞—Ä–≥–µ—Ç\w*|cpm|cpt|vtr|—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤\w*|–∑–≤—ñ—Ç–∏|–æ—Ö–æ–ø–ª–µ–Ω–Ω\w*|—á–∞—Å—Ç–æ—Ç\w*)\b/i;

// AVB/A-B
const AVB_RX = /\b(avb|audio\s*video\s*bridging|a\/?b|–∞\/?–±|–∞–≤–±)\b/i;

// –±—Ä–µ–Ω–¥-—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ —Ç–∏–ø—É ‚Äú–¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ Nestle‚Äù
const BRAND_SPECIFIC_RX = /\b(–∫–ª—ñ—î–Ω—Ç\w*|–±—Ä–µ–Ω–¥\w*|–¥–ª—è)\s+[A-Za-z–ê-–Ø–∞-—è–Ü–á–Ñ“ê—ñ—î—ó0-9][\w&\-.]{1,}\b/i;

// —à–≤–∏–¥–∫–∞ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –≤–Ω—É—Ç—Ä. –ø–æ—Å–∏–ª–∞–Ω—å
function sanitizeInternalRefs(text) {
  if (!text) return text;
  let out = text;
  out = out.replace(/#\s*[^#"‚Äú‚Äù\n]+\.(txt|md|docx|doc|xlsx|xls|pptx|pdf)/gi, '–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone');
  out = out.replace(/(?:–¥–æ–∫—É–º–µ–Ω—Ç(—É|–∞|–æ–º)?|—Ñ–∞–π–ª(—É|–∞|–æ–º)?|document)\s+["‚Äú][^"‚Äù]+["‚Äù]/gi, '–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone');
  out = out.replace(/–∑–≤–µ—Ä–Ω—É[—Ç—Ç]–∏—Å—è\s+–¥–æ\s+–¥–æ–∫—É–º–µ–Ω—Ç[–∞—É—ñ][^.,;]*[, ]*/gi, '–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∫–æ–º–∞–Ω–¥–∏ Vidzone, ');
  out = out.replace(/\s{2,}/g, ' ').replace(/,\s*,/g, ', ').trim();
  return out;
}

// –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—É: ¬´–≤—ñ–¥–∑–æ–Ω/–≤–∏–¥–∑–æ–Ω¬ª -> "vidzone", –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤–µ
function normalizeQuery(s = '') {
  let t = (s || '').toLowerCase();
  t = t.replace(/\b–≤—ñ–¥–∑–æ–Ω\w*\b/gi, 'vidzone')
       .replace(/\b–≤–∏–¥–∑–æ–Ω\w*\b/gi, 'vidzone')
       .replace(/\s{2,}/g, ' ')
       .trim();
  return t;
}

// –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è —Ä–µ—Ç—Ä—ñ–≤–µ—Ä–∞ (–¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç)
function expandForRetriever(s = '') {
  const base = normalizeQuery(s);
  const booster = ' | —Å–∏–Ω–æ–Ω—ñ–º–∏: Vidzone, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Vidzone, DSP Vidzone, OTT/CTV, Smart TV, programmatic, —â–æ —Ç–∞–∫–µ Vidzone, –æ–ø–∏—Å Vidzone';
  return base.length < 20 ? (base + booster) : (base + ' ' + booster);
}

// –∫–æ—Ä–µ–∫—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ KB –¥–æ –∑–∞–ø–∏—Ç—É (Unicode)
function overlapScore(userText, kb) {
  if (!kb) return 0;
  const stop = new Set(['—Ç–∞','—ñ','–π','–∞–±–æ','–Ω–∞','–≤','—É','–¥–æ','–ø—Ä–æ','–∑–∞','—â–æ','—è–∫','—á–∏','—Ü–µ','–º–∏','–≤–∏','—î','–∑','–ø–æ','–¥–ª—è','–≤—ñ–¥','–±–µ–∑']);
  const tokens = (userText || '').toLowerCase().match(/\p{L}{3,}/gu) || []; // –ª–∏—à–µ —Å–ª–æ–≤–∞ (–±—É–¥—å-—è–∫–∞ –ª—ñ—Ç–µ—Ä–∞)
  const keys = tokens.filter(t => !stop.has(t) && t.length >= 4);
  if (!keys.length) return 0;
  const text = kb.toLowerCase();
  let hits = 0;
  for (const k of keys) if (text.includes(k)) hits++;
  return hits / keys.length;
}

// ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
const mainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üì∫ –ü—Ä–æ Vidzone', callback_data: 'menu_about' }, { text: 'üìÑ –®–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'menu_documents' }],
      [{ text: 'üòÑ –í–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone', callback_data: 'menu_jokes' }, { text: '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'menu_help' }],
    ],
  },
};
const documentMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç', callback_data: 'doc_guaranteeLetter' }, { text: 'üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏', callback_data: 'doc_techRequirements' }],
      [{ text: 'üéº –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞', callback_data: 'doc_musicCertificate' }],
      [{ text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
    ],
  },
};
const documentFormatKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìÑ –¢–µ–∫—Å—Ç–æ–º', callback_data: 'format_text' }, { text: 'üìù –§–∞–π–ª–æ–º Word', callback_data: 'format_word' }],
      [{ text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'back_to_documents' }],
    ],
  },
};

// –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–º º—è—Ç—å –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
const userDocumentRequests = new Map();

/** === LLM gate (fallback) === */
async function isRelevantToVidzone(userText) {
  try {
    const system = `
–¢–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –í–∏–∑–Ω–∞—á, —á–∏ –∑–∞–ø–∏—Ç —Ç–µ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ –¢–ë/CTV/OTT/adtech –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ Vidzone (–ø–æ—Å–ª—É–≥–∏, –ø–∞–∫–µ—Ç–∏, CPM/CPT, –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∏, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è/–∑–≤—ñ—Ç–∏, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó/—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ).
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä—ñ–≤–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "relevant" –∞–±–æ "offtopic".
–ù–µ –≤–≤–∞–∂–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–º–∏ –ø–æ–≥–æ–¥—É, –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç, –∫—É–ª—ñ–Ω–∞—Ä—ñ—é, —Å–ø–æ—Ä—Ç, –∑–∞–≥–∞–ª—å–Ω—ñ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó —Ç–æ—â–æ.
    `.trim();

    const resp = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${process.env.OPENAI_API_KEY}` },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        temperature: 0,
        messages: [
          { role: 'system', content: system },
          { role: 'user', content: userText },
        ],
      }),
    });

    const data = await resp.json();
    const answer = (data?.choices?.[0]?.message?.content || '').trim().toLowerCase();
    return answer.startsWith('relevant');
  } catch (e) {
    console.error('Relevance gate error:', e);
    return false; // –Ω–∞ –∑–±–æ—ó ‚Äî –∫—Ä–∞—â–µ —Å—É–≤–æ—Ä–æ (–æ—Ñ—Ñ—Ç–æ–ø)
  }
}

export default async function handler(req, res) {
  const { body } = req;
  if (!body?.message?.text && !body?.callback_query) return res.status(200).send('Non-message update skipped');

  // ===== Callback (–∫–Ω–æ–ø–∫–∏)
  if (body.callback_query) {
    const callbackQuery = body.callback_query;
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data === 'menu_about') {
      await bot.sendMessage(
        chatId,
        'Vidzone ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∞ DSP-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—ñ (Smart TV, OTT). –î–∞—î –∑–º–æ–≥—É –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ç—ñ–∫-—Ä–µ–∫–ª–∞–º—É –∑ –≥–Ω—É—á–∫–∏–º —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º —ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±—é–¥–∂–µ—Ç—É.',
        mainMenuKeyboard
      );
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_jokes') {
      const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
      await bot.sendMessage(chatId, randomJoke, mainMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_help') {
      await bot.sendMessage(chatId, '–ü–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ Vidzone. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—é, –ø—ñ–¥–∫–∞–∂—É, –¥–æ –∫–æ–≥–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è.', mainMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data.startsWith('doc_')) {
      userDocumentRequests.set(userId, data.replace('doc_', ''));
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentFormatKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'format_text' || data === 'format_word') {
      const docKey = userDocumentRequests.get(userId);
      if (!docKey) {
        await bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏ –æ–±—Ä–∞–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', documentMenuKeyboard);
        await bot.answerCallbackQuery(callbackQuery.id);
        return res.status(200).send('ok');
      }

      if (data === 'format_text') {
        if (docKey === 'guaranteeLetter') {
          await bot.sendMessage(chatId, guaranteeLetter, documentMenuKeyboard);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: '–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç (—Ç–µ–∫—Å—Ç)', botResponse: guaranteeLetter });
        } else if (docKey === 'techRequirements') {
          await bot.sendMessage(chatId, techRequirements, documentMenuKeyboard);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: '–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ (—Ç–µ–∫—Å—Ç)', botResponse: techRequirements });
        } else if (docKey === 'musicCertificate') {
          await bot.sendMessage(chatId, musicCertificate, documentMenuKeyboard);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: '–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ (—Ç–µ–∫—Å—Ç)', botResponse: musicCertificate });
        }
      } else {
        let filePath = null;
        if (docKey === 'guaranteeLetter') filePath = guaranteeLetterDocx;
        else if (docKey === 'techRequirements') filePath = techRequirementsDocx;
        else if (docKey === 'musicCertificate') filePath = musicCertificateDocx;

        if (filePath) {
          await bot.sendDocument(chatId, filePath);
          await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: `–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç ${docKey} (Word-—Ñ–∞–π–ª)`, botResponse: `–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª ${filePath}` });
        } else {
          await bot.sendMessage(chatId, '–§–∞–π–ª –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.', documentMenuKeyboard);
        }
      }

      userDocumentRequests.delete(userId);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'back_to_menu') {
      await bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'back_to_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    await bot.answerCallbackQuery(callbackQuery.id);
    return res.status(200).send('ok');
  }

  // ===== –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç
  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  console.log(`User asked: ${text}`);
  const userMessage = (text || '').toLowerCase().trim();

  // ---- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø–µ—Ä–µ–¥ –≥–µ–π—Ç–∞–º–∏)

  // (1) CEO / –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ ‚Äî —à–∏—Ä—à–∏–π –º–∞—Ç—á
  const CEO_RX = /\b((—î|–µ)–≤–≥–µ–Ω(–∏–π)?|yevhen|evhen|evgen|yevgen)\s+–ª–µ–≤—á–µ–Ω–∫–æ\b/i;
  const CEO_ALT_RX = /\b(ceo|—Å–µ–æ|–∫–µ—Ä—ñ–≤–Ω–∏–∫|–¥–∏—Ä–µ–∫—Ç–æ—Ä)\s+(vidzone|–≤—ñ–¥–∑–æ–Ω\w*|–≤–∏–¥–∑–æ–Ω\w*)\b/i;

  if (CEO_RX.test(userMessage) || CEO_ALT_RX.test(userMessage) || /levchenko\b/i.test(userMessage)) {
    await bot.sendMessage(id, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.', mainMenuKeyboard);
    return res.status(200).send('CEO Answer Sent');
  }

  // (2) –ñ–∞—Ä—Ç–∏
  if (userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç') || userMessage.includes('–∂–∞—Ä—Ç') || userMessage.includes('—Å–º—ñ—à–Ω–µ') || userMessage.includes('–≤–µ—Å–µ–ª–µ')) {
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, randomJoke, mainMenuKeyboard);
    return res.status(200).send('Joke Sent');
  }

  // (3) –°—Ç–∞—Ä—Ç
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –û—Å—å —â–æ —è –º–æ–∂—É:\n\n` +
        `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –ø–æ—Å–ª—É–≥–∏, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –†–ö —Ç–∞ —Ä–µ–∫–ª–∞–º—É –Ω–∞ digital TV\n` +
        `‚Ä¢ –ù–∞–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç)\n` +
        `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –≤–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone\n` +
        `‚Ä¢ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø–æ –ø–∞–∫–µ—Ç–∞—Ö, —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥—É, CPM/CPT, OTT/CTV, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º`,
      mainMenuKeyboard
    );
    return res.status(200).send('Welcome Sent');
  }

  // (4) –ñ–æ—Ä—Å—Ç–∫—ñ —Ç—Ä–∏–≥–µ—Ä–∏ –µ—Å–∫–∞–ª–∞—Ü—ñ—ó: AVB/A-B —Ç–∞ –±—Ä–µ–Ω–¥-–∑–∞–ø–∏—Ç–∏
  if (AVB_RX.test(userMessage) || BRAND_SPECIFIC_RX.test(userMessage)) {
    const botResponse = TEMPLATES.ESCALATE_ANI;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: text, botResponse, note: 'Hard escalate (AVB/brand)' });
    await bot.sendMessage(id, botResponse, mainMenuKeyboard);
    return res.status(200).send('HardEscalate');
  }

  // === –ö–†–û–ö 1. –†–ï–õ–ï–í–ê–ù–¢–ù–Ü–°–¢–¨ ===
  let relevant = VIDZONE_HINT_RX.test(userMessage); // –æ–±—Ö—ñ–¥ gate, —è–∫—â–æ —î —è–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ
  if (!relevant) relevant = await isRelevantToVidzone(text);

  if (!relevant) {
    const botResponse = TEMPLATES.OFFTOPIC_POLITE;
    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: text, botResponse });
    await bot.sendMessage(id, botResponse, mainMenuKeyboard);
    return res.status(200).send('OfftopicByGate');
  }

  // === –ö–†–û–ö 2. RAG ===
  let relevantChunks = [];
  const vidzoneHint = VIDZONE_HINT_RX.test(userMessage);

  try {
    // 1-–∞ —Å–ø—Ä–æ–±–∞: –ø—ñ–¥—Å–∏–ª–µ–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Ä–µ—Ç—Ä—ñ–≤–µ—Ä–∞
    const expandedQuery = expandForRetriever(text);
    relevantChunks = await retrieveRelevantChunks(expandedQuery, process.env.OPENAI_API_KEY);

    // 2-–∞ —Å–ø—Ä–æ–±–∞: —è–∫—â–æ —è–≤–Ω–æ –ø—Ä–æ Vidzone —ñ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å —Å–ª–∞–±–∫–∞ ‚Äî –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç-—É—Ç–æ—á–Ω–µ–Ω–Ω—è
    const kbJoined1 = Array.isArray(relevantChunks) ? relevantChunks.join('\n\n---\n\n') : '';
    const score1 = overlapScore(normalizeQuery(userMessage), kbJoined1);

    if (vidzoneHint && (!kbJoined1 || score1 < 0.08)) {
      const secondChanceQuery = '—â–æ —Ç–∞–∫–µ Vidzone? –æ–ø–∏—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ Vidzone. Vidzone ‚Äî DSP –¥–ª—è —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ Smart TV (OTT/CTV).';
      const sc = await retrieveRelevantChunks(secondChanceQuery, process.env.OPENAI_API_KEY);
      if (Array.isArray(sc) && sc.length) {
        const seen = new Set(relevantChunks);
        for (const c of sc) if (!seen.has(c)) relevantChunks.push(c);
      }
    }
  } catch (e) {
    console.error('RAG error:', e);
  }

  const knowledgeBlock = Array.isArray(relevantChunks) && relevantChunks.length ? relevantChunks.join('\n\n---\n\n') : '';

  // –Ø–∫—â–æ KB –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ ‚Äú–Ω–µ –ø—Ä–æ —Ü–µ‚Äù ‚Äî –µ—Å–∫–∞–ª–∞—Ü—ñ—è (–ø–æ—Ä—ñ–≥ –º‚Äô—è–∫—à–∏–π –¥–ª—è —è–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–æ Vidzone)
  const kbRelevance = overlapScore(normalizeQuery(userMessage), knowledgeBlock);
  const MIN_SCORE = vidzoneHint ? 0.0 : 0.12;

  if (!knowledgeBlock || kbRelevance < MIN_SCORE) {
    const botResponse = TEMPLATES.ESCALATE_ANI;
    await logToGoogleSheet({
      timestamp: new Date().toISOString(),
      userId,
      userMessage: text,
      botResponse,
      note: `Escalate: KB=${!!knowledgeBlock}, score=${kbRelevance.toFixed(2)}, vidzoneHint=${vidzoneHint}`
    });
    await bot.sendMessage(id, botResponse, mainMenuKeyboard);
    return res.status(200).send('NoOrLowKB_Escalated');
  }

  // === –ö–†–û–ö 3. –í—ñ–¥–ø–æ–≤—ñ–¥—å LLM –ª–∏—à–µ –∑ RAG-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ===
  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —ñ –¥—Ä—É–∂–Ω—å–æ.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–≤–µ–¥–µ–Ω—ñ –Ω–∏–∂—á–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∑–Ω–∞–Ω—å. –ù–µ –≤–∏–≥–∞–¥—É–π.
–ù–µ –∑–≥–∞–¥—É–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö –Ω–∞–∑–≤–∏ –∞–±–æ —à–ª—è—Ö–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤/—Ñ–∞–π–ª—ñ–≤ (—Ç–∏–ø—É "–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫–µ–π—Å–∏") ‚Äî –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ "–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫–æ–º–∞–Ω–¥–∏ Vidzone".
–Ø–∫—â–æ —É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö –Ω–µ–º–∞—î —á—ñ—Ç–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –ø–æ—Ä–∞–¥—å –µ—Å–∫–∞–ª—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ ${CONTACT_ANI}.

# –ë–∞–∑–∞ –∑–Ω–∞–Ω—å (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏):
${knowledgeBlock}
`.trim();

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${process.env.OPENAI_API_KEY}` },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        temperature: 0.2,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    console.log('OpenAI full response:', JSON.stringify(data, null, 2));
    let reply = data?.choices?.[0]?.message?.content?.trim() || '';

    const suspiciousPhrases = ['–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π', '–Ω–µ –∑–Ω–∞—é', '–Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó', '–Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏', '–ø–µ—Ä–µ–¥–±–∞—á–∞—é', '–≥—ñ–ø–æ—Ç–µ—Ç–∏—á–Ω–æ', '—É—è–≤—ñ—Ç—å', '–≤ —Ç–µ–æ—Ä—ñ—ó'];
    const containsSuspicious = reply && suspiciousPhrases.some((phrase) => reply.toLowerCase().includes(phrase));

    reply = sanitizeInternalRefs(reply);

    if (!reply || containsSuspicious) {
      const botResponse = TEMPLATES.ESCALATE_ANI;
      await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: text, botResponse, note: 'LLM uncertain -> escalate' });
      await bot.sendMessage(id, botResponse, mainMenuKeyboard);
      return res.status(200).send('LLM_FallbackEscalated');
    }

    await logToGoogleSheet({ timestamp: new Date().toISOString(), userId, userMessage: userMessage, botResponse: reply });
    await bot.sendMessage(id, reply, mainMenuKeyboard);
    return res.status(200).send('ok');

  } catch (err) {
    console.error('OpenAI error:', err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.', mainMenuKeyboard);
    return res.status(500).send('OpenAI error');
  }
}

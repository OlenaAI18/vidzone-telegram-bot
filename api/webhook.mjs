import { retrieveRelevantChunks } from '../lib/rag.mjs';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

import { logToGoogleSheet } from '../googleSheetsLogger.js';
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –¢–µ–∫—Å—Ç–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');

// –®–ª—è—Ö–∏ –¥–æ .docx —Ñ–∞–π–ª—ñ–≤
const guaranteeLetterDocx = path.join(__dirname, '../data/guarantee_letter.docx');
const techRequirementsDocx = path.join(__dirname, '../data/technical_requirements.docx');
const musicCertificateDocx = path.join(__dirname, '../data/music_certificate.docx');

// –í–µ—Å–µ–ª—ñ –∂–∞—Ä—Ç–∏ –ø—Ä–æ Vidzone
const jokes = [
  'Vidzone ‚Äî —î–¥–∏–Ω–µ –º—ñ—Å—Ü–µ, –¥–µ ¬´Skip Ad¬ª –Ω–µ –∫–Ω–æ–ø–∫–∞, –∞ –∂–∏—Ç—Ç—î–≤–∞ –ø–æ–∑–∏—Ü—ñ—è.',
  '–£ –Ω–∞—Å 98% VTR. –¢—ñ 2% ‚Äî —Ü–µ –∫—ñ—Ç, —â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ –ø—É–ª—å—Ç.',
  '–ù–∞—à —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –∑–Ω–∞—î, —è–∫–∏–π —É –≤–∞—Å —Å–µ—Ä—ñ–∞–ª, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –≤–∏ –π–æ–≥–æ –≤–≤—ñ–º–∫–Ω–µ—Ç–µ.',
  '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ ¬´–Ω—ñ–∫–æ–ª–∏ —ó—ó –Ω–µ –±–∞—á–∏—Ç—å¬ª. –ü—Ä–∏–≤—ñ—Ç, YouTube Premium!',
  'Vidzone ‚Äî —î–¥–∏–Ω–∞ —Ä–µ–∫–ª–∞–º–∞, —è–∫—É –¥–∏–≤–ª—è—Ç—å—Å—è –Ω–∞ –≤–µ–ª–∏–∫–æ–º—É –µ–∫—Ä–∞–Ω—ñ —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º‚Ä¶ –∞–±–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –±–µ–∑ –≤—Ç–µ—á—ñ.',
  '–ù–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —Ç–∞–∫–∞ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∞, —â–æ –∑–¥–∞—î—Ç—å—Å—è, –Ω—ñ–±–∏ –º–∏ —á—É–ª–∏ –≤–∞—à—É —Ä–æ–∑–º–æ–≤—É‚Ä¶ (–Ω—ñ, —Ü–µ –Ω–µ —Ç–∞–∫‚Ä¶ —á–∏ —Ç–∞–∫?).',
  'Vidzone ‚Äî –º—ñ—Å—Ü–µ, –¥–µ ¬´—Ä–µ–∫–ª–∞–º–Ω–∏–π —à—É–º¬ª –∑–≤—É—á–∏—Ç—å —è–∫ –º—É–∑–∏–∫–∞ –¥–ª—è –º–µ–¥—ñ–∞–ø–ª–∞–Ω–µ—Ä–∞.',
  '–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É –Ω–∞–≤—ñ—Ç—å —Ç–∏–º, —Ö—Ç–æ —Ö–æ–≤–∞—î—Ç—å—Å—è –∑–∞ –¥–∏–≤–∞–Ω–æ–º.',
  'Vidzone: –∫–æ–ª–∏ —Ö–æ—á–µ—Ç—å—Å—è –∫—É–ø–∏—Ç–∏, —â–µ –¥–æ —Ç–æ–≥–æ, —è–∫ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ —Ö–æ—á–µ—Ç—å—Å—è.',
  'Vidzone ‚Äî —Ü–µ –∫–æ–ª–∏ ¬´—Ä–µ–∫–ª–∞–º—É –¥–∏–≤–ª—è—Ç—å—Å—è –≤—Å—ñ¬ª, —ñ –Ω–∞–≤—ñ—Ç—å —Å–æ–±–∞–∫–∞.',
];

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üì∫ –ü—Ä–æ Vidzone', callback_data: 'menu_about' },
        { text: 'üìÑ –®–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'menu_documents' },
      ],
      [
        { text: 'üòÑ –í–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone', callback_data: 'menu_jokes' },
        { text: '‚ùì –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'menu_help' },
      ],
    ],
  },
};

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
const documentMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç', callback_data: 'doc_guaranteeLetter' },
        { text: 'üìÑ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏', callback_data: 'doc_techRequirements' },
      ],
      [
        { text: 'üéº –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞', callback_data: 'doc_musicCertificate' },
      ],
      [
        { text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' },
      ],
    ],
  },
};

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
const documentFormatKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üìÑ –¢–µ–∫—Å—Ç–æ–º', callback_data: 'format_text' },
        { text: 'üìù –§–∞–π–ª–æ–º Word', callback_data: 'format_word' },
      ],
      [
        { text: '‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤', callback_data: 'back_to_documents' },
      ],
    ],
  },
};

// –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–º º—è—Ç—å –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
const userDocumentRequests = new Map();

export default async function handler(req, res) {
  const { body } = req;
  if (!body?.message?.text && !body?.callback_query) return res.status(200).send('Non-message update skipped');

  if (body.callback_query) {
    const callbackQuery = body.callback_query;
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    // –û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º–µ–Ω—é
    if (data === 'menu_about') {
      await bot.sendMessage(chatId, 
        'Vidzone ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∞ DSP-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó —Ä–µ–∫–ª–∞–º–∏ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—ñ (Smart TV, OTT). –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–∑–≤–æ–ª—è—î —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è–º –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ç—ñ–∫-—Ä–µ–∫–ª–∞–º—É –∑ –≥–Ω—É—á–∫–∏–º —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º —ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±—é–¥–∂–µ—Ç—É. –û—Å–Ω–æ–≤–Ω–∞ –º–µ—Ç–∞ Vidzone ‚Äî –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ –∑ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¢–í.',
        mainMenuKeyboard
      );
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_jokes') {
      const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
      await bot.sendMessage(chatId, randomJoke, mainMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'menu_help') {
      await bot.sendMessage(chatId,
        '–ü–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, —è –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—é ‚Äî —Å–∫–∞–∂—É –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: a.ilyenko@vidzone.com',
        mainMenuKeyboard
      );
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (data.startsWith('doc_')) {
      userDocumentRequests.set(userId, data.replace('doc_', ''));
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentFormatKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (data === 'format_text' || data === 'format_word') {
      const docKey = userDocumentRequests.get(userId);

      if (!docKey) {
        await bot.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –≤–∏ –æ–±—Ä–∞–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', mainMenuKeyboard);
        await bot.answerCallbackQuery(callbackQuery.id);
        return res.status(200).send('ok');
      }

      if (data === 'format_text') {
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É
        if (docKey === 'guaranteeLetter') {
          await bot.sendMessage(chatId, guaranteeLetter, documentMenuKeyboard);
          await logToGoogleSheet({
            timestamp: new Date().toISOString(),
            userId,
            userMessage: `–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç (—Ç–µ–∫—Å—Ç)`,
            botResponse: guaranteeLetter,
          });
        } else if (docKey === 'techRequirements') {
          await bot.sendMessage(chatId, techRequirements, documentMenuKeyboard);
          await logToGoogleSheet({
            timestamp: new Date().toISOString(),
            userId,
            userMessage: `–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏ (—Ç–µ–∫—Å—Ç)`,
            botResponse: techRequirements,
          });
        } else if (docKey === 'musicCertificate') {
          await bot.sendMessage(chatId, musicCertificate, documentMenuKeyboard);
          await logToGoogleSheet({
            timestamp: new Date().toISOString(),
            userId,
            userMessage: `–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ (—Ç–µ–∫—Å—Ç)`,
            botResponse: musicCertificate,
          });
        }
      } else {
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Word-—Ñ–∞–π–ª—É
        let filePath = null;
        if (docKey === 'guaranteeLetter') filePath = guaranteeLetterDocx;
        else if (docKey === 'techRequirements') filePath = techRequirementsDocx;
        else if (docKey === 'musicCertificate') filePath = musicCertificateDocx;

        if (filePath) {
          await bot.sendDocument(chatId, filePath);
          await logToGoogleSheet({
            timestamp: new Date().toISOString(),
            userId,
            userMessage: `–í–∏–±—Ä–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç ${docKey} (Word-—Ñ–∞–π–ª)`,
            botResponse: `–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª ${filePath}`,
          });
        } else {
          await bot.sendMessage(chatId, '–§–∞–π–ª –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.', documentMenuKeyboard);
        }
      }

      userDocumentRequests.delete(userId);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
    if (data === 'back_to_menu') {
      await bot.sendMessage(chatId, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', mainMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    if (data === 'back_to_documents') {
      await bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentMenuKeyboard);
      await bot.answerCallbackQuery(callbackQuery.id);
      return res.status(200).send('ok');
    }

    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback, —è–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–æ–∫
    await bot.answerCallbackQuery(callbackQuery.id);
    return res.status(200).send('ok');
  }

  // –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç (message.text)
  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  console.log(`User asked: ${text}`);
  const userMessage = text?.toLowerCase().trim() || '';

  // === –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ===
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –û—Å—å —â–æ —è –º–æ–∂—É:\n\n` +
      `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é, –ø–æ—Å–ª—É–≥–∏, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å–µ —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –∑ —Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ —Ñ–∞–∫—Ç–∞–º–∏\n` +
      `‚Ä¢ –ù–∞–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç)\n` +
      `‚Ä¢ –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —â–æ—Å—å –≤–µ—Å–µ–ª–µ –ø—Ä–æ Vidzone\n` +
      `‚Ä¢ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø–æ —Ä–µ–∫–ª–∞–º–Ω–∏–º –∫–µ–π—Å–∞–º —ñ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó —Ä–∏–Ω–∫—É, –≤ —è–∫–æ–º—É –º–∏ –ø—Ä–∞—Ü—é—î–º–æ. –í—Å–µ —Ç–µ, —â–æ –¥–æ–ø–æ–º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º`,
      mainMenuKeyboard
    );
    return res.status(200).send('Welcome Sent');
  }

  if (
    userMessage.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') ||
    userMessage.includes('ceo') ||
    userMessage.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') ||
    userMessage.includes('—Å–µ–æ') ||
    userMessage.includes('—à–µ—Ñ') ||
    userMessage.includes('–≥–æ–ª–æ–≤–Ω–∏–π')
  ) {
    await bot.sendMessage(id, 'CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.', mainMenuKeyboard);
    return res.status(200).send('CEO Answer Sent');
  }

  if (
    userMessage.includes('–∞–Ω–µ–∫–¥–æ—Ç') ||
    userMessage.includes('–∂–∞—Ä—Ç') ||
    userMessage.includes('—Å–º—ñ—à–Ω–µ') ||
    userMessage.includes('–≤–µ—Å–µ–ª–µ')
  ) {
    const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
    await bot.sendMessage(id, randomJoke, mainMenuKeyboard);
    return res.status(200).send('Joke Sent');
  }

  // === RAG: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –¥–ª—è GPT ===
  let relevantChunks = [];
  try {
    relevantChunks = await retrieveRelevantChunks(text, process.env.OPENAI_API_KEY);
    console.log('RAG top:', relevantChunks.slice(0, 2).map(t => t.slice(0, 80)));
  } catch (e) {
    console.error('RAG error:', e);
  }

  const knowledgeBlock =
    Array.isArray(relevantChunks) && relevantChunks.length
      ? relevantChunks.join('\n\n---\n\n')
      : '';

  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π AI‚Äë–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ —ñ –¥—Ä—É–∂–Ω—å–æ.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–≤–µ–¥–µ–Ω—ñ –Ω–∏–∂—á–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∑–Ω–∞–Ω—å. –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î —É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö ‚Äî —Å–∫–∞–∂–∏, —â–æ –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
–ù–µ –≤–∏–≥–∞–¥—É–π, –Ω–µ –¥–æ–¥–∞–≤–∞–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–æ—ó –Ω–µ–º–∞—î —É –∑–Ω–∞–Ω–Ω—è—Ö.
–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö –≤–∫–∞–∑—É–π –∫–æ–Ω—Ç–∞–∫—Ç–∏ –ª–∏—à–µ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: –ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ (a.ilyenko@vidzone.com).
–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –±–∞–∑–∏ –∑–Ω–∞–Ω—å.

# –ë–∞–∑–∞ –∑–Ω–∞–Ω—å (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏):
${knowledgeBlock}
  `.trim();

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        temperature: 0.2,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    console.log('OpenAI full response:', JSON.stringify(data, null, 2));

    const reply = data?.choices?.[0]?.message?.content?.trim() || '';

    const suspiciousPhrases = [
      '–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π',
      '–Ω–µ –∑–Ω–∞—é',
      '–Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó',
      '–Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏',
      '–ø–µ—Ä–µ–¥–±–∞—á–∞—é',
      '–≥—ñ–ø–æ—Ç–µ—Ç–∏—á–Ω–æ',
      '—É—è–≤—ñ—Ç—å',
      '–≤ —Ç–µ–æ—Ä—ñ—ó',
    ];

    const containsSuspicious = suspiciousPhrases.some((phrase) =>
      reply.toLowerCase().includes(phrase)
    );

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è —É Google Sheets
    const timestamp = new Date().toISOString();

    await logToGoogleSheet({
      timestamp,
      userId,
      userMessage,
      botResponse: reply || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ —à–∞–±–ª–æ–Ω',
    });

    if (!reply || containsSuspicious) {
      await bot.sendMessage(
        id,
        '–Ø —â–µ –≤—á—É—Å—è, —Ç–æ–º—É –Ω–µ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏. –ê–ª–µ —Ç–æ—á–Ω–æ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞! –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ: a.ilyenko@vidzone.com.',
        mainMenuKeyboard
      );
    } else {
      await bot.sendMessage(id, reply, mainMenuKeyboard);
    }

    return res.status(200).send('ok');
  } catch (err) {
    console.error('OpenAI error:', err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.', mainMenuKeyboard);
    return res.status(500).send('OpenAI error');
  }
}

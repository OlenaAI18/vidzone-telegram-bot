// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—ñ–≤
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/technical_requirements.md'), 'utf-8');
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');
const news = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text?.toLowerCase().trim() || '';

  // –í—ñ—Ç–∞–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:
- –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;
- –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤;
- —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é DigitalTV;
üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!`
    );
    return res.status(200).send('Welcome sent');
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
  const musicKeywords = ['–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞', '–¥–æ–≤—ñ–¥–∫–∞ –º—É–∑–∏—á–Ω–∞', '–º—É–∑–∏–∫–∞ –¥–æ–≤—ñ–¥–∫–∞'];
  const techKeywords = ['—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏', '—Ç–µ—Ö –≤–∏–º–æ–≥–∏'];
  const guaranteeKeywords = ['–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç', '–ª–∏—Å—Ç –≥–∞—Ä–∞–Ω—Ç—ñ—è'];

  if (musicKeywords.some(keyword => userMessage.includes(keyword))) {
    await bot.sendMessage(id, `üìù –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞:\n\n${musicCertificate}`);
    return res.status(200).send('Music certificate sent');
  }

  if (techKeywords.some(keyword => userMessage.includes(keyword))) {
    await bot.sendMessage(id, `üìù –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏:\n\n${techRequirements}`);
    return res.status(200).send('Technical requirements sent');
  }

  if (guaranteeKeywords.some(keyword => userMessage.includes(keyword))) {
    await bot.sendMessage(id, `üìù –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç:\n\n${guaranteeLetter}`);
    return res.status(200).send('Guarantee letter sent');
  }

  // –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const systemPrompt = `
–¢–∏ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. 
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ —Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –∑–Ω–∞–Ω–Ω—è:

${credentials}

${news}

${benchmark}

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ, –≤–≤—ñ—á–ª–∏–≤–æ —ñ —Ç—ñ–ª—å–∫–∏ –ø–æ —Ç–µ–º—ñ.
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ß–∏—Ç–∞–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å
const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');
const news = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');

// –ß–∏—Ç–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
const musicCertificate = fs.readFileSync(path.join(__dirname, '../data/music_certificate.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/tech_requirements.md'), 'utf-8');
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) return res.status(200).send('Non-message update skipped');

  const {
    chat: { id },
    text,
  } = body.message;

  const userMessage = text?.toLowerCase().trim() || '';

  // –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
      `–ü—Ä–∏–≤—ñ—Ç! –Ø AI-–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.

–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:
- —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ Vidzone —ñ DigitalTV;
- –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é –±—Ä–µ–Ω–¥—ñ–≤;
- —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ —Ä–æ–ª–∏–∫—ñ–≤;
- —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —â–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å!
–Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –Ω–∞–ø–∏—à–∏ "–¥–æ–≤—ñ–¥–∫–∞", "–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç" –∞–±–æ "—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏", —ñ —è –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é –≤–∞—Ä—ñ–∞–Ω—Ç–∏ üìÑ`
    );
    return res.status(200).send('Welcome sent');
  }

  // –í–∏–±—ñ—Ä –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  if (userMessage.includes('–¥–æ–≤—ñ–¥–∫–∞') || userMessage.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π') || userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏')) {
    let optionsMessage = `–û–∫–µ–π! –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ? –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:
1. –ú—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞
2. –¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏
3. –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç`;

    await bot.sendMessage(id, optionsMessage);
    return res.status(200).send('Documents options sent');
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞') || userMessage.includes('–¥–æ–≤—ñ–¥–∫–∞ –º—É–∑–∏—á–Ω–∞')) {
    await bot.sendMessage(id, musicCertificate);
    return res.status(200).send('Certificate sent');
  }

  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏')) {
    await bot.sendMessage(id, techRequirements);
    return res.status(200).send('Tech Requirements sent');
  }

  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç')) {
    await bot.sendMessage(id, guaranteeLetter);
    return res.status(200).send('Guarantee Letter sent');
  }

  // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø–∏—Ç–∞–Ω—å –ø—Ä–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ—ó
  if (userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || userMessage.includes('–æ—Ö–æ–ø–ª–µ–Ω–Ω—è') || userMessage.includes('–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è') || userMessage.includes('–∫–∞–º–ø–∞–Ω—ñ—é')) {
    const planningResponse = `${benchmark}

---

üìù –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∞–¥–∏–º–æ —Ç–∞–∫–æ–∂ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
–ú–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≥–æ–ª–æ–≤–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.`;

    await bot.sendMessage(id, planningResponse);
    return res.status(200).send('Planning info sent');
  }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
  if (userMessage.startsWith('sov')) {
    await bot.sendMessage(
      id,
      'üîç –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –Ω–∞—Ä–∞–∑—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –Ø–∫—â–æ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –±—Ä–µ–Ω–¥—ñ–≤ –∞–±–æ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤ ‚Äî –ø—ñ–¥–≥–æ—Ç—É—é –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ! üìä'
    );
    return res.status(200).send('SOV stub sent');
  }

  // –ë–∞–∑–∞ –∑–Ω–∞–Ω—å
  const contextText = `
# –ë–∞–∑–∞ –∑–Ω–∞–Ω—å Vidzone

=== –ö—Ä–µ–¥–µ–Ω—à–ª–∏ ===
${credentials}

=== –ë–µ–Ω—á–º–∞—Ä–∫ Clutter ===
${benchmark}

=== –ù–æ–≤–∏–Ω–∏ DigitalTV ===
${news}
`;

  // System Prompt
  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥—Ä—É–∂–Ω—å–æ, –∞–ª–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ. –ù–µ –¥—ñ–ª–∏—Å—å –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.

–ü—Ä–æ Vidzone:
- Vidzone ‚Äî –ø—Ä–æ–≤—ñ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–µ–æ—Ä–µ–∫–ª–∞–º–∏ –Ω–∞ Digital TV (Sweet.tv, MEGOGO, Vodafone TV, –ö–∏—ó–≤—Å—Ç–∞—Ä –¢–ë).
- –°–ï–û –∫–æ–º–ø–∞–Ω—ñ—ó ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.
- –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä ‚Äî –ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ (email: a.ilyenko@vidzone.com).

–ö–æ—Ä–∏—Å—Ç—É–π—Å—è —Ü—ñ—î—é –±–∞–∑–æ—é –∑–Ω–∞–Ω—å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:
${contextText}

üîπ –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫—ñ–≤ ‚Äî –≤–∫–∞–∂–∏ –Ñ–≤–≥–µ–Ω–∞ –õ–µ–≤—á–µ–Ω–∫–∞ —è–∫ CEO.
üîπ –Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —à–∞–±–ª–æ–Ω (–¥–æ–≤—ñ–¥–∫–∞, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç).
üîπ –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É SOV –∞–±–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—Ä–µ–Ω–¥—ñ–≤ ‚Äî —Å–∫–∞–∂–∏, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.
üîπ –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–Ω–Ω–∞ –Ü–ª—å—î–Ω–∫–æ (a.ilyenko@vidzone.com).

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —á—ñ—Ç–∫–æ, –±–µ–∑ –≤–∏–≥–∞–¥–∞–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤.
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    console.log('OpenAI full response:', JSON.stringify(data, null, 2));

    const reply = data.choices?.[0]?.message?.content || 'üîî –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–∫–∞—É–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ (a.ilyenko@vidzone.com)';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error(err);
    await bot.sendMessage(id, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}




// webhook.mjs
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import bot from '../bot.mjs';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ü—Ä–∞–≤–∏–ª—å–Ω—ñ —à–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
const musicReference = fs.readFileSync(path.join(__dirname, '../data/music_reference.md'), 'utf-8');
const techRequirements = fs.readFileSync(path.join(__dirname, '../data/tech_requirements.md'), 'utf-8');
const guaranteeLetter = fs.readFileSync(path.join(__dirname, '../data/guarantee_letter.md'), 'utf-8');

const credentials = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Credentials_Cleaned.md'), 'utf-8');
const benchmark = fs.readFileSync(path.join(__dirname, '../data/Vidzone_Clutter_Benchmark_Cleaned.md'), 'utf-8');
const news = fs.readFileSync(path.join(__dirname, '../data/DigitalTVNews_Cleaned_2025.md'), 'utf-8');

export default async function handler(req, res) {
  const { body } = req;

  if (!body.message) {
    return res.status(200).send('Non-message update skipped');
  }

  const {
    chat: { id },
    text,
    from: { id: userId },
  } = body.message;

  const allowedIds = process.env.ALLOWED_USER_IDS?.split(',') || [];

  if (!allowedIds.includes(userId.toString())) {
    await bot.sendMessage(id, '‚õîÔ∏è –¶–µ–π –±–æ—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º.');
    return res.status(200).send('Unauthorized user');
  }

  const userMessage = text?.toLowerCase().trim() || '';

  // –í—ñ—Ç–∞–Ω–Ω—è
  if (userMessage === '/start' || userMessage.includes('–ø—Ä–∏–≤—ñ—Ç')) {
    await bot.sendMessage(
      id,
`–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone.
–î–æ–ø–æ–º–æ–∂—É –≤–∞–º:
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Vidzone —Ç–∞ —Ä–∏–Ω–æ–∫ DigitalTV;
‚Ä¢ –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏, –¥–æ–≤—ñ–¥–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç);
‚Ä¢ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ—é Digital TV;
‚Ä¢ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ DigitalTV-—à–Ω–æ–≥–æ –≥—É–º–æ—Ä—É. üòÑ

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–µ–º—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.`
    );
    return res.status(200).send('Welcome sent');
  }

  // –î–æ–≤—ñ–¥–∫–∏
  if (userMessage.includes('–º—É–∑–∏—á–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞')) {
    await bot.sendMessage(id, musicReference);
    return res.status(200).send('Music reference sent');
  }

  if (userMessage.includes('—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏')) {
    await bot.sendMessage(id, techRequirements);
    return res.status(200).send('Tech requirements sent');
  }

  if (userMessage.includes('–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç')) {
    await bot.sendMessage(id, guaranteeLetter);
    return res.status(200).send('Guarantee letter sent');
  }

  // System prompt (–ø–æ–∫–æ—Ä–æ—á–µ–Ω–∏–π)
  const systemPrompt = `
–¢–∏ ‚Äî –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ Vidzone. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ.

CEO Vidzone ‚Äî –Ñ–≤–≥–µ–Ω –õ–µ–≤—á–µ–Ω–∫–æ.
–Ø–∫—â–æ –ø–∏—Ç–∞—é—Ç—å –ø—Ä–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π, —Å–∫–∞–∂–∏:
"–†–µ–∫–ª–∞–º–∞ –Ω–∞ DigitalTV –¥–æ–ø–æ–º–∞–≥–∞—î —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –±—Ä–µ–Ω–¥—É –∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—î—é. Vidzone –¥–æ–ø–æ–º–∞–≥–∞—î –±—É–¥—É–≤–∞—Ç–∏ –¥–æ–≤—ñ—Ä—É —Ç–∞ –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ –≤–ø—ñ–∑–Ω–∞–≤–∞–Ω—ñ—Å—Ç—å —Å–µ—Ä–µ–¥ —è–∫—ñ—Å–Ω–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó."

–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
"–ê —â–µ –≤—á—É—Å—å, —Ç–æ–º—É –Ω–µ –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂—É –¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ê–ª–µ –≤–æ–Ω–∏ —Ç–æ—á–Ω–æ —î —É –Ω–∞—à–æ–≥–æ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ê–Ω–Ω–∏ –Ü–ª—å—î–Ω–∫–æ: a.ilyenko@vidzone.com"

–§–∞–∫—Ç–∏:
${credentials}
${benchmark}
${news}
`;

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text },
        ],
      }),
    });

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || 'ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.';
    await bot.sendMessage(id, reply);
    res.status(200).send('ok');
  } catch (err) {
    console.error('OpenAI error', err);
    await bot.sendMessage(id, '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    res.status(500).send('OpenAI error');
  }
}

